[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LiU PhD course: R for Environmental Chemistry Data Analysis",
    "section": "",
    "text": "1 Course content\nThis is the handbook for the PhD course on R for environmental chemistry data analysis"
  },
  {
    "objectID": "index.html#recommended-literature",
    "href": "index.html#recommended-literature",
    "title": "LiU PhD course: R for Environmental Chemistry Data Analysis",
    "section": "1.1 Recommended literature:",
    "text": "1.1 Recommended literature:\nR for Data Science (2e). Hadley Wickham. Freely available at: https://r4ds.hadley.nz/\nR Graphics Cookbook, 2nd edition. Winston Chang. Freely available at: https://r-graphics.org/\nIntroduction to Programming with R. https://discdown.org/rprogramming/introduction.html\nHands-On Programming with R. https://rstudio-education.github.io/hopr/\nPosit Cheatsheets: https://posit.co/resources/cheatsheets/\nR for Data Science: Exercise Solutions. https://jrnold.github.io/r4ds-exercise-solutions/\nStatistical Inference via Data Science: A ModernDive into R and the Tidyverse. https://moderndive.com/index.html\nInteractive web-based data visualization with R, plotly, and shiny. https://plotly-r.com/\nData Visualization: A practical introduction. Kieran Healy. https://socviz.co/\nMastering Software Development in R: https://bookdown.org/rdpeng/RProgDA/\nTo learn more about Quarto books visit:\n\nhttps://quarto.org/docs/books\nhttps://r4ds.hadley.nz/quarto.html\nhttps://quarto.org/docs/computations/execution-options.html\n\nSome usefule links to other R for data science books:\n\nhttps://www.r4epi.com/installing-r-and-rstudio"
  },
  {
    "objectID": "index.html#plan-for-course",
    "href": "index.html#plan-for-course",
    "title": "LiU PhD course: R for Environmental Chemistry Data Analysis",
    "section": "1.2 Plan for course",
    "text": "1.2 Plan for course\nThe final report will be an online book with chapters with one containing a learning diary, and others should contain a scientific report documenting the descriptive analysis and visualization of environmental chemistry relevant data sets.\nStart with R software\nhttps://moderndive.com/1-getting-started.html\n\nInstall R and RStudio\nInstall RTools\n\n-Install packages\n-Managing R with .Rprofile,..: https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf\n\n1.2.0.1 Basic R\n\nBasic concepts\nData types: vector, datatable, list,…\nUsing base R functions: c, paste,..\nUsing functions from installed packages\n\n– library()\n– Use help “?”\n\nIf statements, for loops\nBasic plotting\nImporting excel, csv,..\n\nUsing version control with Git and Github\n\nVersion Control with Git and SVN: https://support.posit.co/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN\nHappy Git and GitHub for the user: https://happygitwithr.com/\n\nWriting and creating markdown documents\n\nMarkdown syntax: https://quarto.org/docs/authoring/markdown-basics.html\nQuarto Books: https://quarto.org/docs/books/\nQuarto blog: https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html\n\n\n\n1.2.0.2 Tidyverse\n\nTidyverse concepts\nThe pipe: %&gt;% OR |&gt;  https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/\nggplot2: https://ggplot2.tidyverse.org/\ndplyr: https://dplyr.tidyverse.org/\n\n– Pivot\n\ntidyr: https://tidyr.tidyverse.org/\nreadr, readxl: https://readr.tidyverse.org/ ; https://readxl.tidyverse.org/\n\n\n\n1.2.0.3 Interactive plotting with R\n\nJavascript and htmlwidgets: https://www.htmlwidgets.org/\nPlotly: https://plotly.com/r/  \nDT: https://rstudio.github.io/DT/\n\n\n\n1.2.0.4 Statistics\n\nBasic stats\nComparison between groups (t-test, K-W, ANOVA,…)\nRegression/correlation\nMultivariate statistics (PCA, HCA,…)\n\n\n\n1.2.0.5 ChatGPT\n\n\n1.2.0.6 Database (optional)\n-        Relational database management system, MySQL\no   https://www.hostinger.com/tutorials/database-schema\no   …\n-        dbplyr: https://dbplyr.tidyverse.org/\nThis handbook uses the following packages:\n\nlibrary(tidyverse)\nlibrary(plotly)"
  },
  {
    "objectID": "1_Basic_R.html#data-types-in-r",
    "href": "1_Basic_R.html#data-types-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.1 Data types in R",
    "text": "2.1 Data types in R\nBasic data types in R can be divided into the following types:\n\nnumeric : (10.5, 55, 787)\ninteger (a.k.a. double) : (1L, 55L, 100L, where the letter “L” declares this as an integer)\ncomplex : (9 + 3i, where “i” is the imaginary part)\ncharacter (a.k.a. string) : (“k”, “R is exciting”, “FALSE”, “11.5”)\nlogical (a.k.a. boolean) : (TRUE or FALSE)\n\nWe can use the class() function to check the data type of a variable:\nNumeric (also called double)\n\nx &lt;- 10.5\nclass(x)\n\n[1] \"numeric\"\n\n\nInteger\n\nx &lt;- 1000L\nclass(x)\n\n[1] \"integer\"\n\n\nComplex\n\n# We will not deal with complex data in this course\nx &lt;- 9i + 3\nclass(x)\n\n[1] \"complex\"\n\n\nCharacter/String\n\nx &lt;- \"Hello World\"\n\n# You can also use str() to check the data type of an object. This function will give more detailed information about the elements in the object\nstr(x)\n\n chr \"Hello World\"\n\n\nLogical/Boolean\n\n# a vector of logical/boolean\nx &lt;- c(TRUE, FALSE)\n\nstr(x)\n\n logi [1:2] TRUE FALSE\n\n\nIf you concatenate elements of different data types in a vector, then R will convert the elements in the following order: 1. string; 2. numeric; 3. integer; 4. logical. It means that all other data types will be converted to a string if you combine these elements with a string element.\n\n# If you want to create an object of a specific data type, then use the as.xxx functions\na_string &lt;- as.character(\"A Space Odyssey\")\na_integer &lt;- as.integer(2001)\na_numeric &lt;- as.numeric(99.999)\na_logical &lt;-  as.logical(TRUE)\n\nc(a_integer, a_string)\n\n[1] \"2001\"            \"A Space Odyssey\"\n\nc(a_integer, a_numeric)\n\n[1] 2001.000   99.999\n\nc(a_integer, a_logical)\n\n[1] 2001    1\n\n\nYou cannot create a datatype that R doesn’t recognize\n\nobject1 &lt;- as.integer(\"Hello\")\n\nWarning: NAs introduced by coercion\n\nstr(object1)\n\n int NA"
  },
  {
    "objectID": "1_Basic_R.html#data-structures-in-r",
    "href": "1_Basic_R.html#data-structures-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.2 Data structures in R",
    "text": "2.2 Data structures in R\nBelow are some basic data structures in R:\n\nvectors\nlists\nmatrices\ndataframes\nfactors\n\nVectors\n\nvectors: also called atomic vectors, where all elements must be of the same basic data types.\n\n\n# A string vector\na_vector_strings &lt;- c(\"This\", \"is\", \"a\", \"vector\", \"of\", \"string\", \"elements\")\nstr(a_vector_strings)\n\n chr [1:7] \"This\" \"is\" \"a\" \"vector\" \"of\" \"string\" \"elements\"\n\n\n\n# integer vectors\na_vector_integers1 &lt;- c(99, 98)\na_vector_integers2 &lt;- c(1, 2, 3, 4, 5)\n\nstr(a_vector_integers1)\n\n num [1:2] 99 98\n\n\nWhat happens when we perform operations with two or more vectors of different length? First, we can use the length() function to check the length of an object\n\nlength(a_vector_integers1)\n\n[1] 2\n\nlength(a_vector_integers2)\n\n[1] 5\n\n\nWe can use == as an equal operator to check if both vectors have the same length\n\nlength(a_vector_integers1) == length(a_vector_integers2)\n\n[1] FALSE\n\n\nWe can see that this will be FALSE since the length of the two vectors are not equal.\nThe opposite is to use the `!=` (not equal to) operator:\n\nlength(a_vector_integers1)!= length(a_vector_integers2)\n\n[1] TRUE\n\n\nFinally, we can see that when performing addition operation of a_vector_integers1 (99, 98) with a_vector_integers2 (1, 2, 3, 4, 5), R will recycle the shorter vector\n\ncombine_vectors &lt;- a_vector_integers1 + a_vector_integers2\n\nWarning in a_vector_integers1 + a_vector_integers2: longer object length is not\na multiple of shorter object length\n\nstr(combine_vectors)\n\n num [1:5] 100 100 102 102 104\n\n\nR will therefore perform the element-wise operations 99+1, 98+2, 99+3, 98+4, 99+5, and the resulting object will have the same length as a_vector_integers2.\nMatrices\nA matrix is a 2 dimensional data structure for vectors of the same datatype.\nLists\nWe can also store elements of different datatypes in objects\nDataframes\nFactors\n\n2.2.1 Object types in R\n(from https://discdown.org/rprogramming/vectors.html)\nR is an object-oriented programming language with the fundamental design principle: Everything in R is an object. In R, objects can be:\n\nVariables (e.g., a, b, result).\nFunctions (e.g., mean(), max(), sin()).\nConnection handlers.\n…\n\n\n\n2.2.2 Operators in R\nThe different comparison operators will be handy for various data analysis:\nSee: https://www.w3schools.com/r/r_operators.asp\nComparison operators\n\n\n\nOperator\nName\nExample\n\n\n\n\n==\nequal to\n\n\n\n!=\nnot equal to\n\n\n\n=&gt;\nequal or greater than\n\n\n\n=&lt;\nequal or less than\n\n\n\n&gt;\ngreater than\n\n\n\n&lt;\nless than\n\n\n\n\nArithmetic Operators\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (Remainder from division)\nx %% y\n\n\n%/%\nInteger Division\nx%/%y\n\n\n\nLogical Operators\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&\nElement-wise Logical AND operator. It returns TRUE if both elements are TRUE\n\n\n&&\nLogical AND operator - Returns TRUE if both statements are TRUE\n\n\n|\nElementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE\n\n\n||\nLogical OR operator. It returns TRUE if one of the statement is TRUE.\n\n\n!|\nLogical NOT - returns FALSE if statement is TRUE\n\n\n\nOther useful operators\n\n\n\nOperator\nDescription\n\n\n\n\n:\nCreates a series of numbers in a sequence\n\n\n%in%\nFind out if an element belongs to a vector\n\n\n%*%\nMatrix Multiplication\n\n\n\n\n\n2.2.3 Loading or importing data files\nhttps://r-graphics.org/loading-a-delimited-text-data-file https://r-graphics.org/loading-data-from-an-excel-file"
  },
  {
    "objectID": "Appendix_Version_control.html",
    "href": "Appendix_Version_control.html",
    "title": "3  Step-by-step instructions",
    "section": "",
    "text": "This guide to install and use Git and Github follows the guide: https://happygitwithr.com\nYou should consult this website for more detailed instructions.\n\n3.0.1 1. Register a Github account\nRegister a github account: https://github.com\n\n\n3.0.2 2. Install Git\n\nDownload git for Windows here: https://gitforwindows.org/\n\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”.\nNote that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention.\n\n\nInstall a Git client, such as GithubDesktop: https://desktop.github.com/\n\n\n\n3.0.3 3. Set up keys for SSH"
  }
]