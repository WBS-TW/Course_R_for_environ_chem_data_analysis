---
Title: Example data analysis from a PFAS study
output: html_document
execute: 
  eval: false
editor_options: 
  chunk_output_type: console
---

# Data analysis of Kumla PFAS study

```{r}
 
library(tidyverse)
library(readxl)
library(plotly)
library(EnvStats)
library(ggExtra)
library(ggforce)
library(FSA)
library(Hmisc)
library(corrplot)
library(RColorBrewer)
library(pheatmap)
library(rcompanion)
library(EnvStats)
library(ggrepel)
library(ggsignif)
library(ggpubr)
library(broom)

options(scipen=999)
options(digits = 3)


### Loading raw data


  #-----
#Functions
standerror <- function(x) {
  se <- sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))
}
#-----
PFAS_insects <- readxl::read_excel("data/Statistics_Kumla_20200408.xlsx", 
    sheet = "Overview")

PFAS_insects <- as_tibble(PFAS_insects) %>%
  mutate(Group = as.factor(Group)) %>%
  mutate(ID = as.factor(ID)) %>%
  mutate(`Sampling site`= as.factor(`Sampling site`)) %>%
  mutate(`Sampling site`= fct_relevel(`Sampling site`, "K1", "KS", "KRef")) %>%
  mutate(Group_Family = as.factor(Group_Family)) %>%
  mutate(`Sampling site` = as.factor(`Sampling site`)) %>%
  mutate(Group = as.factor(Group)) %>%
  mutate_if(is.numeric, round, 3) #round all numeric columns
  

kumla_isotopes <- as_tibble(read_excel("data/Statistics_Kumla_20200408.xlsx", 
                                 sheet = "Overiew Iso")) %>%
  mutate(Group = as.factor(Group)) %>%
  mutate(`Sampling site`= as.factor(`Sampling site`)) %>%
  mutate(Group_Family = as.factor(Group_Family)) %>%
  mutate(`Sampling site` = as.factor(`Sampling site`)) %>%
  mutate_if(is.numeric, round, 2) %>% #round all numeric columns
  select(1:8)


kumla_isotopes_all<- kumla_isotopes %>%
  group_by(Group) %>%
  summarise(n = n(),
            min_d13C = min(delta13C), 
            min5_d13C = quantile(delta13C, 0.05),
            mean_d13C = mean(delta13C),
            median_d13C = quantile(delta13C, 0.5),
            max95_d13C = quantile(delta13C, 0.95),
            max_d13C = max(delta13C),
            min_d15N = min(delta15N),
            min5_d15N = quantile(delta15N, 0.05),
            mean_d15N = mean(delta15N),
            median_d15N = quantile(delta15N, 0.5),
            max95_d15N = quantile(delta15N, 0.95),
            max_d15N = max(delta15N),
            se_d15N = standerror(delta15N),
            se_d13C = standerror(delta13C),
            lb_d13C = mean_d13C-se_d13C,
            ub_d13C = mean_d13C+se_d13C,
            lb_d15N = mean_d15N-se_d15N,
            ub_d15N = mean_d15N+se_d15N
        )

kumla_isotopes_K1 <- kumla_isotopes %>%
  filter(`Sampling site`== "K1") %>%
  group_by(Group) %>%
  summarise(n = n(),
            min_d13C = min(delta13C), 
            min5_d13C = quantile(delta13C, 0.05),
            mean_d13C = mean(delta13C),
            median_d13C = quantile(delta13C, 0.5),
            max95_d13C = quantile(delta13C, 0.95),
            max_d13C = max(delta13C),
            min_d15N = min(delta15N),
            min5_d15N = quantile(delta15N, 0.05),
            mean_d15N = mean(delta15N),
            median_d15N = quantile(delta15N, 0.5),
            max95_d15N = quantile(delta15N, 0.95),
            max_d15N = max(delta15N),
            se_d15N = standerror(delta15N),
            se_d13C = standerror(delta13C),
            lb_d13C = mean_d13C-se_d13C,
            ub_d13C = mean_d13C+se_d13C,
            lb_d15N = mean_d15N-se_d15N,
            ub_d15N = mean_d15N+se_d15N
        )

kumla_isotopes_KS <- kumla_isotopes %>%
  filter(`Sampling site`== "KS") %>%
  group_by(Group) %>%
  summarise(n = n(),
            min_d13C = min(delta13C), 
            min5_d13C = quantile(delta13C, 0.05),
            mean_d13C = mean(delta13C),
            median_d13C = quantile(delta13C, 0.5),
            max95_d13C = quantile(delta13C, 0.95),
            max_d13C = max(delta13C),
            min_d15N = min(delta15N),
            min5_d15N = quantile(delta15N, 0.05),
            mean_d15N = mean(delta15N),
            median_d15N = quantile(delta15N, 0.5),
            max95_d15N = quantile(delta15N, 0.95),
            max_d15N = max(delta15N),
            se_d15N = standerror(delta15N),
            se_d13C = standerror(delta13C),
            lb_d13C = mean_d13C-se_d13C,
            ub_d13C = mean_d13C+se_d13C,
            lb_d15N = mean_d15N-se_d15N,
            ub_d15N = mean_d15N+se_d15N
        )

kumla_isotopes_KRef <- kumla_isotopes %>%
  filter(`Sampling site`== "KRef") %>%
  group_by(Group) %>%
  summarise(n = n(),
            min_d13C = min(delta13C), 
            min5_d13C = quantile(delta13C, 0.05),
            mean_d13C = mean(delta13C),
            median_d13C = quantile(delta13C, 0.5),
            max95_d13C = quantile(delta13C, 0.95),
            max_d13C = max(delta13C),
            min_d15N = min(delta15N),
            min5_d15N = quantile(delta15N, 0.05),
            mean_d15N = mean(delta15N),
            median_d15N = quantile(delta15N, 0.5),
            max95_d15N = quantile(delta15N, 0.95),
            max_d15N = max(delta15N),
            se_d15N = standerror(delta15N),
            se_d13C = standerror(delta13C),
            lb_d13C = mean_d13C-se_d13C,
            ub_d13C = mean_d13C+se_d13C,
            lb_d15N = mean_d15N-se_d15N,
            ub_d15N = mean_d15N+se_d15N
        )




# Colors
## Set color palette
# c12 <- c(
#   "dodgerblue2", 
#   "#E31A1C", # red
#   "#6A3D9A", # purple
#   "#FF7F00", # orange
#   "gold1",
#   "#FB9A99", # lt pink
#   "gray35", 
#   "maroon", 
#   "deeppink1", 
#   "blue1", 
#   "brown",
#   "black")


#Alina color palette
c12 <- c(
  "cadetblue2", 
  "dodgerblue3",
  "darkolivegreen2",
  "darkorange",
  "darkslategrey",
  "forestgreen",
  "goldenrod3", 
  "chocolate4", 
  "darkorchid4", 
  "deeppink1", 
  "darkslategray1",
  "darkblue")

# pie(rep(1, 11), col = c11)

#color
matrix_color <- setNames(c12, c(levels(PFAS_insects$Group)))
matrix_color2 <- setNames(c12, c(levels(kumla_isotopes$Group)))



### Grouping homologs and isomers

PFCAs <- c("PFHpA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA")
PFSAs <- c("PFBS",	"sum_PFHxS",	"PFHpS80",	"sum_PFOS",	"PFNS80",	"PFDS80",	"PFOSA")
FTSAs <- c("6_2_FTSA",	"8_2_FTSA", "10_2_FTSA") 
# lin_PFCAs <- c("PFBA", "PFPeA", "PFHxA",	"PFHpA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA", "PFTDA", "PFHxDA", "PFOcDA")
# lin_PFSAs <- c("PFBS",	"PFPeS", "PFHxS",	"PFHpS",	"PFOS",	"PFNS",	"PFDS",	"PFDoDS")
# FTSAs <- c("FTSA42",	"FTSA62",	"FTSA82")
# lin_PFASs <- c("PFBA", "PFPeA", "PFHxA",	"PFHpA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA", "PFTDA", "PFHxDA", "PFOcDA",
#             "PFBS",	"PFPeS", "PFHxS",	"PFHpS",	"PFOS",	"PFNS",	"PFDS",	"PFDoDS",
#             "FTSA42",	"FTSA62",	"FTSA82")
# 
# 
PFHxS_iso <- c("L-PFHxS80", "1-PFHxS", "4/2-PFHxS", "3-PFHxS")
PFOS_iso <- c("3/4/5-PFOS80/98.9", "6/2-PFOS169/80", "1-PFOS 419/169", "L-PFOS 99/169")




## END START CHUNK ## 


```

```{r normality tests}


# PFAS histograms


# Shapiro-Wilk test for normality 

df_shapiro_ID <- PFAS_insects %>%
  select(ID, sum_21PFAS) %>%
  filter()
 

shapiro.test(df_shapiro_ID$sum_21PFAS)
hist(df_shapiro_ID$sum_21PFAS)
shapiro.test(log10(df_shapiro_ID$sum_21PFAS))

hist(log10(df_shapiro_ID$sum_21PFAS))


# Shapiro-Wilk test for normality PFOS

df_shapiro <- PFAS_insects %>%
  select(Group, sum_PFOS) %>%
  filter(Group == "Emergent aquatic insects")

shapiro.test(df_shapiro$sum_PFOS)
hist(df_shapiro$sum_PFOS)
shapiro.test(log10(df_shapiro$sum_PFOS))
hist(log10(df_shapiro$sum_PFOS))

# Isotopes histograms

kumla_isotopes %>%
  ggplot(aes(x =  delta15N)) +
  geom_histogram(bins = 10) +
  facet_wrap(~Group,scales = "free") +
  theme_bw()

kumla_isotopes %>%
  ggplot(aes(x =  delta13C)) +
  geom_histogram(bins = 10) +
  facet_wrap(~Group,scales = "free") +
  theme_bw()


isotope_raw_checkNormality <- kumla_isotopes %>%
  select(Group, delta13C, delta15N) %>%
  filter(Group == "Emergent aquatic insects")

shapiro.test(isotope_raw_checkNormality$delta13C)
shapiro.test(isotope_raw_checkNormality$delta15N)



# branched PFOS

PFAS_insects %>%
  select(PFOS_iso) %>%
  ggplot(aes(x =  perc_sum_brPFOS)) +
  geom_histogram(bins = 6) +
  facet_wrap(~Matrix,scales = "free") +
  theme_bw()
```

```{r sum_21PFAS, include=FALSE}
# boxplot concentrations

#sum21_TPFASs pond
PFAS_insects %>%
  mutate(Group = fct_relevel(Group,
                             "Aquatic insect larvae",
                             "Emergent aquatic insects",
                             "Terrestrial invertebrate consumers",
                             "Sediment",
                             "Earthworms",
                             "Water")) %>%
  filter(Group != "Water") %>%
  ggplot(mapping = aes(x = Group,
                       y = sum_21PFAS, fill = Group)) +
  stat_boxplot(geom ="errorbar", width = 0.5) + 
  geom_boxplot(outlier.colour = "white") +
  geom_jitter(shape = 1, position = position_jitter(0.2)) +
  scale_fill_manual(values = matrix_color) +
  scale_x_discrete(labels = function(Group) str_wrap(Group, width = 10)) + 
  stat_summary(fun=mean, colour="black", geom="point", 
               shape=18, size=3,show.legend = FALSE) +
   labs(x = NULL, y = expression(paste(Sigma, "PFASs (","ng g"^{-1}, " dw)"))) +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  facet_wrap(.~`Sampling site`, scales = "free_y")


```

```{r isotopes}

#--------------------------------------

#All sites
kumla_isotopes %>%
ggplot() +
  geom_point(aes(x = delta13C, y = delta15N, color = Group, shape = `Sampling site`), size = 3, alpha = 0.5) + # raw points
  scale_color_manual(name = "Group", values = matrix_color) +
  scale_x_continuous(name = expression(paste(delta^{13},"C (\u2030)"))) + 
  scale_y_continuous(name = expression(paste(delta^{15},"N (\u2030)"))) + 
  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),
  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +
  geom_errorbar(data = kumla_isotopes_all, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +
  geom_errorbarh(data = kumla_isotopes_all, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +
  theme_bw(base_size = 16, base_family="serif") + 
  theme(axis.text=element_text(size = 16),
        legend.title = element_text(face = "bold", size = 16, hjust = 0.5),
        legend.text = element_text(size = 14),
        #legend.position= c(0.85, 0.25),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
  #facet_wrap(.~ `Sampling site`, scales = "fixed") # mean and error bar not correctly mapped




#Individual sites: K1
kumla_isotopes %>%
  filter(`Sampling site` == "K1") %>%
ggplot() +
  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points
  scale_color_manual(name = "Group", values = matrix_color) +
  scale_x_continuous(name = expression(paste(delta^{13},"C (\u2030)"))) + 
  scale_y_continuous(name = expression(paste(delta^{15},"N (\u2030)"))) + 
  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),
  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +
  geom_errorbar(data = kumla_isotopes_K1, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +
  geom_errorbarh(data = kumla_isotopes_K1, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +
  theme_bw(base_size = 16, base_family="serif") + 
  theme(axis.text=element_text(size = 16),
        legend.title = element_text(face = "bold", size = 16, hjust = 0.5),
        legend.text = element_text(size = 14),
        #legend.position= c(0.85, 0.25),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
  #facet_wrap(.~ `Sampling site`, scales = "fixed") # mean and error bar not correctly mapped

#Individual sites: KS
kumla_isotopes %>%
  filter(`Sampling site` == "KS") %>%
  filter(`Full ID` != "K2 SW T1 trichoptera") %>% #remove trichoptera which had very low 13C
ggplot() +
  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points
  scale_color_manual(name = "Group", values = matrix_color) +
  scale_x_continuous(name = expression(paste(delta^{13},"C (\u2030)"))) + 
  scale_y_continuous(name = expression(paste(delta^{15},"N (\u2030)"))) + 
  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),
  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +
  geom_errorbar(data = kumla_isotopes_KS, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +
  geom_errorbarh(data = kumla_isotopes_KS, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +
  theme_bw(base_size = 16, base_family="serif") + 
  theme(axis.text=element_text(size = 16),
        legend.title = element_text(face = "bold", size = 16, hjust = 0.5),
        legend.text = element_text(size = 14),
        #legend.position= c(0.85, 0.25),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
  #facet_wrap(.~ `Sampling site`, scales = "fixed") # mean and error bar not correctly mapped

kumla_isotopes %>%
  filter(`Sampling site` == "KS") %>%
  plot_ly(x = ~delta13C, y = ~delta15N, color = ~Group) %>%
  add_markers(text = ~ `Full ID`)

#Individual sites: KRef
kumla_isotopes %>%
  filter(`Sampling site` == "KRef") %>%
ggplot() +
  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points
  scale_color_manual(name = "Group", values = matrix_color) +
  scale_x_continuous(name = expression(paste(delta^{13},"C (\u2030)"))) + 
  scale_y_continuous(name = expression(paste(delta^{15},"N (\u2030)"))) + 
  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),
  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +
  geom_errorbar(data = kumla_isotopes_KRef, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +
  geom_errorbarh(data = kumla_isotopes_KRef, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +
  theme_bw(base_size = 16, base_family="serif") + 
  theme(axis.text=element_text(size = 16),
        legend.title = element_text(face = "bold", size = 16, hjust = 0.5),
        legend.text = element_text(size = 14),
        #legend.position= c(0.85, 0.25),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
  #facet_wrap(.~ `Sampling site`, scales = "fixed") # mean and error bar not correctly mapped

```

```{r isomers, include=FALSE, warning=FALSE, eval=FALSE}


# %br PFOS Pond


PFAS_insects %>% 
mutate(perc_sum_brPFOS = sum_brPFOS/sum_PFOS*100) %>%
  ggplot(mapping = aes(x = reorder(Group, perc_sum_brPFOS, FUN = median), 
                               y = perc_sum_brPFOS, fill = Group)) +
  stat_boxplot(geom ="errorbar", width = 0.4) + 
  geom_boxplot(outlier.colour = "white") +
  scale_fill_manual(values = matrix_color) +
  geom_jitter(shape = 1, position = position_jitter(0.2)) +
  labs(x = NULL, y = "Percent of branched PFOS (%)") +
  coord_flip() +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  facet_grid(`Sampling site` ~., scales = "free_y")

# %br PFHxS Pond
# only those samples with a percentage above zero i.e. detected branched PFHxS
perc_sum_br_PFHxS <- sum_brPFHxS/sum_PFHxS*100
PFAS_insects %>%
  filter(sum_brPFHxS > 0.2) %>%
  mutate(perc_sum_br_PFHxS = sum_brPFHxS/sum_PFHxS*100) %>%
  ggplot(mapping = aes(x = reorder(Group, perc_sum_br_PFHxS, FUN = median), 
                               y = perc_sum_br_PFHxS, fill = Group)) +
  stat_boxplot(geom ="errorbar", width = 0.4) + 
  geom_boxplot(outlier.colour = "white") +
  scale_fill_manual(values = matrix_color) +
  geom_jitter(shape = 1, position = position_jitter(0.2)) +
  labs(x = NULL, y = "Percent of branched PFOS (%)") +
  coord_flip() +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  facet_grid(`Sampling site` ~., scales = "free_y")
```

ANOVA and post hocs for d15N and d13C isotopes

Values sharing a letter are not significantly different

```{r Kruskal Wallis Dunn post hoc}

#------------ISotopes 


#---------sumPFAS

conc_PFAS_pond <- conc_PFAS %>%
  filter(Site == "Pond") %>%
  filter(!Matrix %in% c("Water", "Part. matter")) %>%
  filter(!Matrix %in% c("Sed.", "Soil", "Aq. plants", "Aq. biofilm", "Aq. biofilm water")) %>%
  mutate(Matrix = as.factor(Matrix))
  # %>%
  # group_by(Matrix) %>%
  # tally()

kruskal.test(conc_PFAS_pond$Sum24_TPFASs ~ conc_PFAS_pond$Matrix)
PT_PFAS <- dunnTest(Sum24_TPFASs ~ Matrix, data = conc_PFAS_pond, method = "bh")
PT_PFAS <- PT_PFAS$res
cldList(comparison = PT_PFAS$Comparison,
        p.value    = PT_PFAS$P.adj,
        threshold  = 0.05,
        remove.space = TRUE)


## Pond vs creek of sumPFAS for terr. predators
conc_PFAS_terr_pred_pond <- conc_PFAS %>%
  filter(Matrix == "Terr. inv. predators") %>%
  filter(Site == "Pond")

conc_PFAS_terr_pred_creek <- conc_PFAS %>%
  filter(Matrix == "Terr. inv. predators") %>%
  filter(Site == "Sörbybäcken")

# t-test on aquatic vs terrestrial for pond
t.test(conc_PFAS_terr_pred_pond$Sum24_TPFASs, conc_PFAS_terr_pred_creek$Sum24_TPFASs, alternative = "two.sided", var.equal = F)
wilcox.test(conc_PFAS_terr_pred_pond$Sum24_TPFASs, conc_PFAS_terr_pred_creek$Sum24_TPFASs)

## PFOS

kruskal.test(conc_PFAS_pond$PFOS ~ conc_PFAS_pond$Matrix)
PT_PFOS <- dunnTest(PFOS ~ Matrix, data = conc_PFAS_pond, method = "bh")
PT_PFOS <- PT_PFOS$res
cldList(comparison = PT_PFOS$Comparison,
        p.value    = PT_PFOS$P.adj,
        threshold  = 0.05,
        remove.space = TRUE)






#-------branched isomers
#brPFOS

isomer_PFOS_pond <- isomer_PFOS %>%
  filter(Site == "Pond") %>%
  filter(!matrix %in% c("Sed.", "Soil", "Aq. plants"))
  # group_by(matrix) %>%
  # tally()
  
kruskal.test(isomer_PFOS_pond$perc_sum_br_PFOS ~ isomer_PFOS_pond$Matrix)
PT_brPFOS <- dunnTest(perc_sum_br_PFOS ~ matrix, data = isomer_PFOS_pond, method = "bh")
PT_brPFOS <- PT_brPFOS$res
cldList(comparison = PT_brPFOS$Comparison,
        p.value    = PT_brPFOS$P.adj,
        threshold  = 0.05,
        remove.space = TRUE)

# gives non-sign difference between part matter and water which is strange. check using Mann-Whitney

isomer_PFOS_pond_MannU <- isomer_PFOS_pond %>%
  select(Matrix, perc_sum_br_PFOS) %>%
  filter(Matrix == "Part. matter" | Matrix == "Water")

partMater <- isomer_PFOS_pond_MannU %>%
  filter(Matrix == "Part. matter") %>%
  select(perc_sum_br_PFOS) %>%
  as_vector()

water <- isomer_PFOS_pond_MannU %>%
  filter(Matrix == "Water") %>%
  select(perc_sum_br_PFOS) %>%
  as_vector()


wilcox.test(water, partMater)


# Tukey HSD
isomer_anova <- tidy(TukeyHSD(aov(perc_sum_br_PFOS ~ Matrix, data = isomer_PFOS_pond)))
cldList(comparison = isomer_anova$comparison,
        p.value    = isomer_anova$adj.p.value,
        threshold  = 0.05,
        remove.space = TRUE)

#brPFHxS

isomer_PFHxS_pond <- isomer_PFHxS %>%
  filter(Site == "Pond") %>%
  filter(brPFHxS_perc > 0) %>%
  filter(!Matrix %in% c("Sed.", "Soil", "Aq. plants"))
  # group_by(Matrix) %>%
  # tally()
  
kruskal.test(isomer_PFHxS_pond$brPFHxS_perc ~ isomer_PFHxS_pond$Matrix)
PT_brPFHxS <- dunnTest(brPFHxS_perc ~ Matrix, data = isomer_PFHxS_pond, method = "bh")
PT_brPFHxS <- PT_brPFHxS$res
cldList(comparison = PT_brPFHxS$Comparison,
        p.value    = PT_brPFHxS$P.adj,
        threshold  = 0.05,
        remove.space = TRUE)




#BAF aq
BAF_aq_PFOS_pond <- BAF_aq_PFOS %>% filter(Site == "Pond") %>% select(1, 8:12)
BAF_aq_PFOS_pond_long <- BAF_aq_PFOS_pond %>% pivot_longer(-Name, names_to = "isomer", values_to = "concentration") %>% mutate(isomer = as.factor(isomer))
BAF_aq_PFHxS_pond <- BAF_aq_PFHxS %>% filter(Site == "Pond") %>% select(1, 8:9)
BAF_aq_PFHxS_pond_long <- BAF_aq_PFHxS_pond %>% pivot_longer(-Name, names_to = "isomer", values_to = "concentration")

# Better documentation of what is done!: test something something...
kruskal.test(list(BAF_aq_PFOS_pond$`dimetyl 80/99`, BAF_aq_PFOS_pond$`3/4/5-PFOS80/98.9`, BAF_aq_PFOS_pond$`6/2-PFOS169/80`,
                  BAF_aq_PFOS_pond$`1-PFOS 419/169`, BAF_aq_PFOS_pond$`L-PFOS 99/169`))


PT_BAF_PFOS <- dunnTest(concentration ~ isomer, data = BAF_aq_PFOS_pond_long, method = "bh")
PT_BAF_PFOS <- PT_BAF_PFOS$res
cldList(comparison = PT_BAF_PFOS$Comparison,
        p.value    = PT_BAF_PFOS$P.adj,
        threshold  = 0.05,
        remove.space = TRUE)

# Difference of BAF between PFHxS isomers
kruskal.test(list(BAF_aq_PFHxS_pond$`L-PFHxS80`, BAF_aq_PFHxS_pond$`4/2-PFHxS`))

```

Correlations

```{r correlation}
conc_PFAS %>%
  filter(Site == "Pond") %>% 
  ggplot(aes(x = PFOS, y = `PFHxS`)) +
  geom_point(aes(colour = Group_Order), size = 3, show.legend = NA) +
  facet_wrap(~Matrix, scales = "free") + 
  theme_bw() +
  theme(legend.position = "bottom")
  

res <- conc_PFAS %>%
  filter(Site == "Pond") %>%
  select(ID, PFBA, PFPeA, PFHxA, PFHpA, PFOA, PFNA, PFDA, PFUnDA, PFBS, PFPeS, PFHxS, PFHpS, PFOS, PFNS, PFDS, `6_2 FTSA`)

res <- as.matrix(column_to_rownames(res, var = "ID"))

res2 <- cor(res, method = "spearman")

corrplot(res2, 
         method = "circle",
         type = "full", 
         order = "hclust",
         hclust.method = "ward.D",
         sig.level = 0.05,
         insig = "pch",
         tl.col = "black", 
         tl.srt = 45)  
  
corrplot.mixed(res2,
               lower = "number",
               upper = "circle",
               lower.col = "black",
               number.cex = 0.75,
               tl.cex = 0.8
               )
  
pheatmap(res2,
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         scale = "none",
         clustering_distance_rows = "euclidean",
         clustering_method = "ward.D"
         )
    
```

BAFs

```{r BAFs}

##PFSAs

BAF_aq %>%
  select(Name, Site, Matrix, Class, Order, PFSAs) %>%
  pivot_longer(cols = PFSAs, names_to = "Homolog", values_to = "BAF") %>%
  mutate(Homolog = as_factor(Homolog)) %>%
  ggplot(aes(x = Homolog, y = BAF)) +
  geom_point(aes(color = Order)) +
  facet_wrap(~Order, scales = "free_y") +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank())



#PFCAs
BAF_aq %>%
  select(Name, Site, Matrix, Class, Order, PFCAs) %>%
  pivot_longer(cols = PFCAs, names_to = "Homolog", values_to = "BAF") %>%
  mutate(Homolog = as_factor(Homolog)) %>%
  ggplot(aes(x = Homolog, y = BAF)) +
  geom_point(aes(color = Order)) +
  facet_wrap(~Order, scales = "free_y") +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank())


#FTSAs
BAF_aq %>%
  select(Name, Site, Matrix, Class, Order, FTSAs) %>%
  pivot_longer(cols = FTSAs, names_to = "Homolog", values_to = "BAF") %>%
  mutate(Homolog = as_factor(Homolog)) %>%
  ggplot(aes(x = Homolog, y = BAF)) +
  geom_point(aes(color = Order)) +
  facet_wrap(~Order, scales = "free_y") +
  theme_bw(base_family="serif") +
  theme(legend.position = "none",
        axis.text.x = element_text(color = "black", size = 14, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        axis.text.y = element_text(color = "black", size = 14, angle = 0, hjust = 1, vjust = 0, face = "plain"),
        axis.title.x = element_text(color = "black", size = 16, angle = 0, hjust = .5, vjust = 0, face = "plain"),
        axis.title.y = element_text(color = "black", size = 16, angle = 90, hjust = .5, vjust = .5, face = "plain"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank())



```
