---
Title: Statements, Conditions and Loops
output: html_document
number-sections: true
editor_options: 
  chunk_output_type: console
---

# Conditional statements

```{r}
#| echo: false
#| warning: false
#| message: false

PFAS_insects <- readxl::read_excel("data/Statistics_Kumla_20200408.xlsx", 
    sheet = "Overview")
```

Check: <https://discdown.org/rprogramming/conditional-execution.html>

´If´ statements tell R to run a line of code if a condition returns TRUE and also another line of code if the condition returns FALSE. For example:

IF (A = TRUE)

then B

else C

Here is an anology to an environmental pollutant case.

```{r}

# https://graphviz.org/doc/info/shapes.html

DiagrammeR::grViz("
digraph condition_PFOS {

# node definitions with substituted label text
node [fontname = Helvetica]
a [label = '@@1', shape = 'box']
b [label = '@@2', shape = 'box']
c [label = '@@3']
d [label = '@@4']


# edge definitions with the node IDs
a -> b [label = 'IF']
b -> c [label = 'TRUE']
b -> d [label = 'ELSE']
}

[1]: 'Pollutant level'
[2]: 'Higher than threshold level'
[3]: 'Take actions'
[4]: 'No actions'
")
```

Example

```{r}

if (5 > 3) {
  print("TRUE")
}

```

We can also add an `else` statement which will be executed if the first statement evaluates to `FALSE`.

```{r}
if (5 < 3){
  print("TRUE")
} else {
    print("FALSE")
  }

```

Example from the PFAS dataset

```{r}
# Initiate empty numeric vector so we can fill it with relevant data with the if statement
PFOS_water <- as.numeric()
PFOS_sediment <- as.numeric()
PFOS_earthworms <- as.numeric()
PFOS_emerg_ins <- as.numeric()
PFOS_aq_inslarv <- as.numeric()
PFOS_terr_invcons <- as.numeric()

# create an object with an integer which we can use in below if statement so we dont need to change all values in the if statement
i <- 1

if(PFAS_insects$Group[i] == "Water"){
  PFOS_water[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Sediment") {
  PFOS_sediment[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Earthworms") {
  PFOS_earthworms[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[1] == "Emergent aquatic insects") {
  PFOS_emerg_ins[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Aquatic insect larvae") {
  PFOS_aq_inslarv[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Terrestrial invertebrate consumers") {
  PFOS_terr_invcons[i] <- PFAS_insects$PFOS[i]
}

```

## `For` loops

See: <https://www.dataquest.io/blog/for-loop-in-r/>

We can use `for` loops to iterate or repeat same operation

Example:

```{r}
# Create an empty character vector
sample_PFOS_info <- character()

# iteratively fill the empty vector using a for loop and paste text with different cells at the i:th position of each selected column
for (i in 1:length(PFAS_insects$ID)) {
  sample_PFOS_info[i] <- paste("This sample: ", 
              PFAS_insects$ID[i], 
              " has PFOS concentration of", 
              round(PFAS_insects$PFOS[i],2 )
  )
}

```

Example:

We might want to create separate vectors that include PFOS concentrations for each sample group. We use a for loop to find samples and combine samples in separate vectors that are from the same sample group (water, sediment, earthworms, emerging aquatic insects, aquatic insect larvae, terrestrial consumers).

```{r}

PFOS_water <- as.numeric()
PFOS_sediment <- as.numeric()
PFOS_earthworms <- as.numeric()
PFOS_emerg_aq_ins <- as.numeric()
PFOS_aq_inslarv <- as.numeric()
PFOS_terr_invcons <- as.numeric()

for (i in 1:length(PFAS_insects$Group)){

if(PFAS_insects$Group[i] == "Water"){
  PFOS_water[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Sediment") {
  PFOS_sediment[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Earthworms") {
  PFOS_earthworms[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Emergent aquatic insects") {
  PFOS_emerg_aq_ins[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Aquatic insect larvae") {
  PFOS_aq_inslarv[i] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Terrestrial invertebrate consumers") {
  PFOS_terr_invcons[i] <- PFAS_insects$PFOS[i]
}
}

```

The output of some vectors

```{r}
str(PFOS_water)
str(PFOS_earthworms)
str(PFOS_aq_inslarv)
```

However, we can see that the `[i]`index is the same for all objects which means that once R finds the statement that evaluates to TRUE, then it will paste the value in the i:th element in the output object. Therefore any other values that evaluates to `FALSE` will get NA values.

To remove NA values from each output vector.

```{r}

PFOS_water <- as.numeric()
PFOS_sediment <- as.numeric()
PFOS_earthworms <- as.numeric()
PFOS_emerg_aq_ins <- as.numeric()
PFOS_aq_inslarv <- as.numeric()
PFOS_terr_invcons <- as.numeric()

for (i in 1:length(PFAS_insects$Group)){
  if(PFAS_insects$Group[i] == "Water"){
    j <- length(PFOS_water)+1
    PFOS_water[j] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Sediment") {
  k <- length(PFOS_sediment)+1
  PFOS_sediment[k] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Earthworms") {
  l <- length(PFOS_earthworms)+1
  PFOS_earthworms[l] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Emergent aquatic insects") {
  m <- length(PFOS_emerg_aq_ins)+1
  PFOS_emerg_aq_ins[m] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Aquatic insect larvae") {
  n <- length(PFOS_aq_inslarv)+1
  PFOS_aq_inslarv[n] <- PFAS_insects$PFOS[i]
} else if (PFAS_insects$Group[i] == "Terrestrial invertebrate consumers") {
  o <- length(PFOS_terr_invcons)+1
  PFOS_terr_invcons[o] <- PFAS_insects$PFOS[i]
}
}

```

```{r}

str(PFOS_water)
str(PFOS_earthworms)
str(PFOS_aq_inslarv)
```

As you can see, the script becomes long and repetitive, and therefore easy to make mistakes. There are easier ways to get the same results. Can you think of a more efficient script?

```{r}

for (i in 1:3) {
  for(j in 1:2) {
    print(letters[j])
  }
  print(i)
  }

```
