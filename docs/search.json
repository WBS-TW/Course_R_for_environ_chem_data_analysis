[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "",
    "text": "1 Course content\nThis is the handbook for the PhD course on R for environmental chemistry data analysis"
  },
  {
    "objectID": "index.html#recommended-literature",
    "href": "index.html#recommended-literature",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "1.1 Recommended literature:",
    "text": "1.1 Recommended literature:\nIntroduction to Programming with R. https://discdown.org/rprogramming/introduction.html\nHands-On Programming with R. https://rstudio-education.github.io/hopr/\nR for Data Science (2e). Hadley Wickham. Freely available at: https://r4ds.hadley.nz/\nR for Data Science: Exercise Solutions. https://jrnold.github.io/r4ds-exercise-solutions/\nR Graphics Cookbook, 2nd edition. Winston Chang. Freely available at: https://r-graphics.org/\nPosit Cheatsheets: https://posit.co/resources/cheatsheets/\nStatistical Inference via Data Science: A ModernDive into R and the Tidyverse. https://moderndive.com/index.html\nInteractive web-based data visualization with R, plotly, and shiny. https://plotly-r.com/\nData Visualization: A practical introduction. Kieran Healy. https://socviz.co/\nMastering Software Development in R: https://bookdown.org/rdpeng/RProgDA/\nTo learn more about Quarto books visit:\n\nhttps://quarto.org/docs/books\nhttps://r4ds.hadley.nz/quarto.html\nhttps://quarto.org/docs/computations/execution-options.html\n\nSome useful links to other R for data science books:\n\nhttps://www.r4epi.com/installing-r-and-rstudio"
  },
  {
    "objectID": "index.html#plan-for-course",
    "href": "index.html#plan-for-course",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "1.2 Plan for course",
    "text": "1.2 Plan for course\nThe final report will be an online book with chapters with one containing a learning diary, and others should contain a scientific report documenting the descriptive analysis and visualization of environmental chemistry relevant data sets.\nStart with R software\nhttps://moderndive.com/1-getting-started.html\n\nInstall R and RStudio\nInstall RTools\n\n-Install packages\n-Managing R with .Rprofile,..: https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf\n\n1.2.0.1 Basic R\n\nBasic concepts\nData types: vector, dataframe, list,…\nUsing base R functions: c, paste,..\nUsing functions from installed packages\n\n– library()\n– Use help “?”\n\nIf statements, for loops\nBasic plotting\nImporting excel, csv,..\n\nUsing version control with Git and Github\n\nVersion Control with Git and SVN: https://support.posit.co/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN\nHappy Git and GitHub for the user: https://happygitwithr.com/\n\nWriting and creating markdown documents\n\nMarkdown syntax: https://quarto.org/docs/authoring/markdown-basics.html\nQuarto Books: https://quarto.org/docs/books/\nQuarto blog: https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html\n\n\n\n1.2.0.2 Tidyverse\n\nTidyverse concepts\nThe pipe: %&gt;% or |&gt;  https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/\nggplot2: https://ggplot2.tidyverse.org/\ndplyr: https://dplyr.tidyverse.org/\npivot\n\n\n\ntidyr: https://tidyr.tidyverse.org/\nreadr, readxl: https://readr.tidyverse.org/ ; https://readxl.tidyverse.org/\n\n\n\n1.2.0.3 Interactive plotting with R\n\nJavascript and htmlwidgets: https://www.htmlwidgets.org/\nPlotly: https://plotly.com/r/  \nDT: https://rstudio.github.io/DT/\n\n\n\n1.2.0.4 Statistics\n\nBasic stats\nComparison between groups (t-test, K-W, ANOVA,…)\nRegression/correlation\nMultivariate statistics (PCA, HCA,…)\n\n\n\n1.2.0.5 ChatGPT\n\n\n1.2.0.6 Database (optional)\n-        Relational database management system, MySQL\no   https://www.hostinger.com/tutorials/database-schema\no   …\n-        dbplyr: https://dbplyr.tidyverse.org/\nSession information with the versions of different packages"
  },
  {
    "objectID": "1_Basic_R.html#data-types-in-r",
    "href": "1_Basic_R.html#data-types-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.1 Data types in R",
    "text": "2.1 Data types in R\nBasic data types in R can be divided into the following types:\n\nnumeric : (10.5, 55, 787)\ninteger (a.k.a. double) : (1L, 55L, 100L, where the letter “L” declares this as an integer)\ncomplex : (9 + 3i, where “i” is the imaginary part)\ncharacter (a.k.a. string) : (“k”, “R is exciting”, “FALSE”, “11.5”)\nlogical (a.k.a. boolean) : (TRUE or FALSE)\n\nWe can use the class() function to check the data type of a variable:\nNumeric (also called double)\n\nx &lt;- 10.5\nclass(x)\n\n[1] \"numeric\"\n\n\nInteger\n\nx &lt;- 1000L\nclass(x)\n\n[1] \"integer\"\n\n\nComplex\n\n# We will not deal with complex data in this course\nx &lt;- 9i + 3\nclass(x)\n\n[1] \"complex\"\n\n\nCharacter/String\n\nx &lt;- \"Hello World\"\n\n# You can also use str() to check the data type of an object. This function will give more detailed information about the elements in the object\nstr(x)\n\n chr \"Hello World\"\n\n\nLogical/Boolean\n\n# a vector of logical/boolean\nx &lt;- c(TRUE, FALSE)\n\nstr(x)\n\n logi [1:2] TRUE FALSE\n\n\nIf you concatenate elements of different data types in a vector, then R will convert the elements in the following order: 1. string; 2. numeric; 3. integer; 4. logical. It means that all other data types will be converted to a string if you combine these elements with a string element.\n\n# If you want to create (or convert) an object of a specific data type, then use the as.xxx functions.\n\na_string &lt;- as.character(\"A Space Odyssey\")\n# You can also skip the as.character and directly use: a_string &lt;- \"A Space Odyssey\". R will recognize is as a string and automatically choose the correct data type.\na_integer &lt;- as.integer(2001)\na_numeric &lt;- as.numeric(99.999)\na_logical &lt;-  as.logical(TRUE)\n\n\n\nc(a_integer, a_string)\n\n[1] \"2001\"            \"A Space Odyssey\"\n\nc(a_integer, a_numeric)\n\n[1] 2001.000   99.999\n\nc(a_integer, a_logical)\n\n[1] 2001    1\n\n\nYou cannot create a datatype that R doesn’t recognize\n\nobject1 &lt;- as.integer(\"Hello\")\n\nWarning: NAs introduced by coercion\n\nstr(object1)\n\n int NA"
  },
  {
    "objectID": "1_Basic_R.html#data-structures-in-r",
    "href": "1_Basic_R.html#data-structures-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.2 Data structures in R",
    "text": "2.2 Data structures in R\nBelow are some basic data structures in R:\n\nvectors\nlists\nmatrices\ndataframes\nfactors\n\nVectors\n\nvectors: also called atomic vectors, where all elements must be of the same basic data types.\n\n\n# A string vector\na_vector_strings &lt;- c(\"This\", \"is\", \"a\", \"vector\", \"of\", \"string\", \"elements\")\nstr(a_vector_strings)\n\n chr [1:7] \"This\" \"is\" \"a\" \"vector\" \"of\" \"string\" \"elements\"\n\n\n\n# integer vectors\na_vector_integers1 &lt;- c(99, 98)\na_vector_integers2 &lt;- c(1, 2, 3, 4, 5)\n\nstr(a_vector_integers1)\n\n num [1:2] 99 98\n\n\nWhat happens when we perform operations with two or more vectors of different length? First, we can use the length() function to check the length of an object\n\nlength(a_vector_integers1)\n\n[1] 2\n\nlength(a_vector_integers2)\n\n[1] 5\n\n\nWe can use == as an equal operator to check if both vectors have the same length\n\nlength(a_vector_integers1) == length(a_vector_integers2)\n\n[1] FALSE\n\n\nWe can see that this will be FALSE since the length of the two vectors are not equal.\nThe opposite is to use the `!=` (not equal to) operator:\n\nlength(a_vector_integers1)!= length(a_vector_integers2)\n\n[1] TRUE\n\n\nFinally, we can see that when performing addition operation of a_vector_integers1 (99, 98) with a_vector_integers2 (1, 2, 3, 4, 5), R will recycle the shorter vector\n\ncombine_vectors &lt;- a_vector_integers1 + a_vector_integers2\n\nWarning in a_vector_integers1 + a_vector_integers2: longer object length is not\na multiple of shorter object length\n\nstr(combine_vectors)\n\n num [1:5] 100 100 102 102 104\n\n\nR will therefore perform the element-wise operations 99+1, 98+2, 99+3, 98+4, 99+5, and the resulting object will have the same length as a_vector_integers2.\nMatrices\nA matrix is a 2 dimensional data structure for vectors of the same datatype.\nLists\nWe can also store elements of different datatypes in list objects.\n\na_vector_integers1 &lt;- c(99, 98)\n\na_vector_strings &lt;- c(\"This\", \"is\", \"a\", \"vector\", \"of\", \"string\", \"elements\")\n\n# In this case, we use the list() function.\na_list &lt;- list(vec_int = a_vector_integers1, \n               vec_str = a_vector_strings)\n\n# If you dont name the elements within the list then these will be unamed.\n\nTo subset an element within the list you can use index (rspatial_indexing?). There is difference between single [] and double brackets[[]]. Can you see the differences between the below indexing?\n\na_list[1]\n\n$vec_int\n[1] 99 98\n\n\n\na_list[[1]]\n\n[1] 99 98\n\n\n\na_list[1][1]\n\n$vec_int\n[1] 99 98\n\n\n\na_list[[1]][1]\n\n[1] 99\n\n\nYou can also use the name of the element for subsetting.\n\na_list[\"vec_int\"]\n\n$vec_int\n[1] 99 98\n\n\nThe dollar-sign $ can also be used.\n\n# These three subsetting operations will give the same results\na_list$vec_int\n\n[1] 99 98\n\na_list[\"vec_int\"]\n\n$vec_int\n[1] 99 98\n\na_list[[1]]\n\n[1] 99 98\n\n\nDataframes\nDataframes are similar as lists but flattened into a rectangular form, similar as tables. The length of individual objects have to be the same.\n\nsample_data &lt;- data.frame(sample_id = c(1, 2, 3, 4),\n                          sample_name = c(\"Inflow\", \"Mid_stream\", \"Outflow\", \"River\"),\n                          measured_PFOS = c(TRUE, TRUE, TRUE, FALSE),\n                          conc_PFOS_ngL = c(99, 5, 123, NA))\n\nFactors\nSee these videos:\nhttps://www.youtube.com/watch?v=xkRBfy8_2MU\nhttps://www.youtube.com/watch?v=cspQYQLZbCo\n\n2.2.1 Object types in R\n(from https://discdown.org/rprogramming/vectors.html)\nR is an object-oriented programming language with the fundamental design principle: Everything in R is an object. In R, objects can be:\n\nVariables (e.g., a, b, result).\nFunctions (e.g., mean(), max(), sin()).\nConnection handlers.\n…\n\n\n\n2.2.2 Operators in R\nThe different comparison operators will be handy for various data analysis:\nSee: https://www.w3schools.com/r/r_operators.asp\nComparison operators\n\n\n\nOperator\nName\n\n\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n=&gt;\nequal or greater than\n\n\n=&lt;\nequal or less than\n\n\n&gt;\ngreater than\n\n\n&lt;\nless than\n\n\n\nArithmetic Operators\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (Remainder from division)\n10 %% 5\n\n\n%/%\nInteger Division\nx%/%y\n\n\n\nLogical Operators\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&\nElement-wise Logical AND operator. It returns TRUE if both elements are TRUE\n\n\n&&\nLogical AND operator - Returns TRUE if both statements are TRUE\n\n\n|\nElementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE\n\n\n||\nLogical OR operator. It returns TRUE if one of the statement is TRUE.\n\n\n!|\nLogical NOT - returns FALSE if statement is TRUE\n\n\n\nOther useful operators\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\n\n\n\n\n:\nCreates a series of numbers in a sequence\n1:10 (creates a sequence from 1 to 10)\n\n\n%in%\nFind out if an element belongs to a vector\n2%in%1:10 (check if 2 is found in the vector 1:10, evaluates to TRUE )\n\n\n%*%\nMatrix Multiplication\nm &lt;- matrix(1:8, nrow=2); 2*m (will multiply every element with 2)\n\n\n\n\n\n2.2.3 Loading or importing data files\nSee: https://r-graphics.org/loading-a-delimited-text-data-file, and https://r-graphics.org/loading-data-from-an-excel-file\nWe will use a dataset in excel format from a study on PFAS levels in insects around a pond in Kumla in Sweden for our data analysis. You can find the dataset here: https://github.com/WBS-TW/Course_R_for_environ_chem_data_analysis/tree/master/data\n\nPFAS_insects &lt;- readxl::read_excel(\"data/Statistics_Kumla_20200408.xlsx\", \n    sheet = \"Overview\")\n\n\n\n2.2.4 Base R plots\nBase R plots are those functions that come with the R version. Additional packages that are easier to handle and have more advanced features will be demonstrated later.\nScatter plot: plot()\n\n# http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs\n\nplot(x = PFAS_insects$PFOA, y = PFAS_insects$PFOS, main = \"PFOA vs PFOS concentrations\",\n     xlab = \"PFOA concentrations (ng/L)\",\n     ylab = \"PFOS concentrations (ng/L\",\n     pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol) \n# We can add a regression line into the same graph\nabline(lm(PFAS_insects$PFOS ~ PFAS_insects$PFOA, data = PFAS_insects), col = \"blue\")\n\n# as well as a loess fit\nlines(lowess(PFAS_insects$PFOA, PFAS_insects$PFOS), col = \"red\")\n\n\n\n\nBar plots: barplot()\n\ngroupsPFOS &lt;- PFAS_insects[, c(\"Group\", \"PFOS\")] # subset two variables from the dataframe\nbarplot(height = PFAS_insects$PFOS)\n\n\n\n\nBox plots: boxplot()\n\n# Box plot of one variable\nboxplot(PFAS_insects$PFBS)"
  },
  {
    "objectID": "2_Conditions_Loops.html#for-loops",
    "href": "2_Conditions_Loops.html#for-loops",
    "title": "3  Conditional statements: if, else, switch()",
    "section": "3.1 For loops",
    "text": "3.1 For loops\nSee: https://www.dataquest.io/blog/for-loop-in-r/\nWe can use for loops to iterate or repeat same operation\nExample:\n\n# Create an empty character vector\nsample_PFOS_info &lt;- character()\n\n# iteratively fill the empty vector using a for loop and paste text with different cells at the i:th position of each selected column\nfor (i in 1:length(PFAS_insects$ID)) {\n  sample_PFOS_info[i] &lt;- paste(\"This sample: \", \n              PFAS_insects$ID[i], \n              \" has PFOS concentration of\", \n              round(PFAS_insects$PFOS[i],2 )\n  )\n}\n\nExample:\nWe might want to create separate vectors that include PFOS concentrations for each sample group. We use a for loop to find samples and combine samples in separate vectors that are from the same sample group (water, sediment, earthworms, emerging aquatic insects, aquatic insect larvae, terrestrial consumers).\n\nPFOS_water &lt;- as.numeric()\nPFOS_sediment &lt;- as.numeric()\nPFOS_earthworms &lt;- as.numeric()\nPFOS_emerg_aq_ins &lt;- as.numeric()\nPFOS_aq_inslarv &lt;- as.numeric()\nPFOS_terr_invcons &lt;- as.numeric()\n\nfor (i in 1:length(PFAS_insects$Group)){\n\nif(PFAS_insects$Group[i] == \"Water\"){\n  PFOS_water[i] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Sediment\") {\n  PFOS_sediment[i] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Earthworms\") {\n  PFOS_earthworms[i] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Emergent aquatic insects\") {\n  PFOS_emerg_aq_ins[i] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Aquatic insect larvae\") {\n  PFOS_aq_inslarv[i] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Terrestrial invertebrate consumers\") {\n  PFOS_terr_invcons[i] &lt;- PFAS_insects$PFOS[i]\n}\n}\n\nThe output of some vectors\n\nstr(PFOS_water)\n\n num [1:9] 228.588 140.046 0.149 1044.649 442.203 ...\n\nstr(PFOS_earthworms)\n\n num [1:14] NA NA NA NA NA NA NA NA NA NA ...\n\nstr(PFOS_aq_inslarv)\n\n num [1:65] NA NA NA NA NA NA NA NA NA NA ...\n\n\nHowever, we can see that the [i]index is the same for all objects which means that once R finds the statement that evaluates to TRUE, then it will paste the value in the i:th element in the output object. Therefore any other values that evaluates to FALSE will get NA values.\nTo remove NA values from each output vector, we can use a nested for loop:\n\nPFOS_water &lt;- as.numeric()\nPFOS_sediment &lt;- as.numeric()\nPFOS_earthworms &lt;- as.numeric()\nPFOS_emerg_aq_ins &lt;- as.numeric()\nPFOS_aq_inslarv &lt;- as.numeric()\nPFOS_terr_invcons &lt;- as.numeric()\n\nfor (i in 1:length(PFAS_insects$Group)){\n  if(PFAS_insects$Group[i] == \"Water\"){\n    j &lt;- length(PFOS_water)+1\n    PFOS_water[j] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Sediment\") {\n  k &lt;- length(PFOS_sediment)+1\n  PFOS_sediment[k] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Earthworms\") {\n  l &lt;- length(PFOS_earthworms)+1\n  PFOS_earthworms[l] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Emergent aquatic insects\") {\n  m &lt;- length(PFOS_emerg_aq_ins)+1\n  PFOS_emerg_aq_ins[m] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Aquatic insect larvae\") {\n  n &lt;- length(PFOS_aq_inslarv)+1\n  PFOS_aq_inslarv[n] &lt;- PFAS_insects$PFOS[i]\n} else if (PFAS_insects$Group[i] == \"Terrestrial invertebrate consumers\") {\n  o &lt;- length(PFOS_terr_invcons)+1\n  PFOS_terr_invcons[o] &lt;- PFAS_insects$PFOS[i]\n}\n}\n\n\nstr(PFOS_water)\n\n num [1:9] 228.588 140.046 0.149 1044.649 442.203 ...\n\nstr(PFOS_earthworms)\n\n num [1:3] 976.1 558.8 29.6\n\nstr(PFOS_aq_inslarv)\n\n num [1:16] 486 448 547 334 311 ...\n\n\nAs you can see, the script becomes long and repetitive, and therefore easy to make mistakes. There are easier ways to get the same results. Can you think of a more efficient script?"
  },
  {
    "objectID": "3_Functions.html#using-functions.",
    "href": "3_Functions.html#using-functions.",
    "title": "4  Functions",
    "section": "4.1 Using functions.",
    "text": "4.1 Using functions.\nIt is recommended to use the ? to see the help page for the function, and see the different arguments within the function. For example, `?round()` will show both the help text for the round function as well as similar functions that shares a same help text. We can also see that the usage is round(x, digits = 0), where x is a single value and digits has a default value of 0. You can change these arguments.\n\nround(x = 98.9893323)\n\n[1] 99\n\n\n\nround(x = 98.9893323, digits = 2)\n\n[1] 98.99\n\n\nYou can also leave out the argument names in the function. The order of the arguments should be the same as in the function help text. Below will give the same output as the above.\n\nround(98.9893323, 2)\n\n[1] 98.99\n\n\n\n4.1.1 Useful functions in base R\napply()\n?apply will show the help text:\nApply Functions Over Array Margins Description Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix.\nUsage\napply(X, MARGIN, FUN, …, simplify = TRUE)\nArguments\nX an array, including a matrix.\nMARGIN - a vector giving the subscripts which the function will be applied over. E.g., for a matrix 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows and columns. Where X has named dimnames, it can be a character vector selecting dimension names.\nFUN - the function to be applied: see ‘Details’. In the case of functions like +, %*%, etc., the function name must be backquoted or quoted.\n… - optional arguments to FUN.\nsimplify - a logical indicating whether results should be simplified if possible.\nDetails… Value…\nYou can specify the function with the names of the arguments:\n\napply(PFAS_insects[, 13:14], 2, median)\n\n      PFBA      PFPeA \n0.21829513 0.06666667 \n\n\nThis function will apply the `median` function across multiple columns (or rows) within a specified matrix or dataframe. In this case, we have filtered out the PFBA and PFPeA compounds from the PFAS_insects dataframe while keeping all rows (samples), and specified MARGIN = 2 for columns, and therefore calculated the median of these two analytes separately. You dont need to add the () for the function in the FUN argument."
  },
  {
    "objectID": "3_Functions.html#writing-your-own-functions",
    "href": "3_Functions.html#writing-your-own-functions",
    "title": "4  Functions",
    "section": "4.2 Writing your own functions",
    "text": "4.2 Writing your own functions\nWe can write functions by using the below structure:\n\nname_of _function &lt;- function(argument1, argument2,...) {\n  YOUR CUSTOM SCRIPT\n  return(OUTPUT)\n}\n\nAn example:\nWhen you name the functions, it is good to use a verb to describe what the function does.\n\nadd_my_values &lt;- function(values) {\n  \n  for (i in seq_along(values)) {\n    i\n    \n  }\n}\n\nHere is another example to calculate the standard error (se) by using the standard deviation function sd:\n\\[\nse = \\frac{\\sigma}{\\sqrt{n}}\n\\]\n(check this link on how to write Latex codes for mathematical expressions: https://www.malinc.se/math/latex/basiccodeen.php)\n\nstderror &lt;- function(x) {\n  se &lt;- sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))  # the script\n  se # the output\n}\n\nThe input argument x is a numeric vector.\n\nsd(c(1,2,3))\n\n[1] 1\n\nstderror(c(1,2,3))\n\n[1] 0.5773503\n\n\nApply this function to the PFAS dataset\n\nsd(PFAS_insects$PFOS)\n\n[1] 460.6185\n\nstderror(PFAS_insects$PFOS)\n\n[1] 44.32303"
  },
  {
    "objectID": "Appendix_Version_control.html",
    "href": "Appendix_Version_control.html",
    "title": "6  Version control using Git and Github",
    "section": "",
    "text": "6.0.1 Step-by-step instructions\nThis guide to install and use Git and Github follows the guide: https://happygitwithr.com\nYou should consult this website for more detailed instructions.\n\n\n6.0.2 1. Register a Github account\nRegister a github account: https://github.com\n\n\n6.0.3 2. Install Git\na. Download git for Windows here: https://gitforwindows.org/\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”.\nNote that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention.\n\nb. Install a Git client, such as GithubDesktop: https://desktop.github.com/\n\n\n6.0.4 3. Set up keys for SSH\na. Create an SSH key pair\n\nIn RStudio, go to Tools &gt; Global Options…&gt; Git/SVN &gt; Create RSA Key….\n\nPassphrase is optional and needed when you want extra security\n\nAfter setting up the SSH key, Go to Tools &gt; Global Options…&gt; Git/SVN. click “View public key”. Copy the key text to your clipboard (Ctrl+c).\n\nb. On Github: - Click on your profile pic in upper right corner - Go to Settings &gt; SSH and GPG keys. Click “New SSH key”. - Paste your public key in the “Key” box. Give it an informative title, presumably repeating the descriptive comment (such as RStudio_LiU) you used above, during key creation. - Click “Add SSH key”.\n\n\n6.0.5 4. Connect your project to GitHub\nIt is recommended to first create a new repository in Github and then link it to a new project in Rstudio GitHub first, then RStudio or link an existing project to the created repository Existing project, GitHub first\n\na. GitHub first, then RStudio: follow these steps: https://happygitwithr.com/new-github-first#make-a-repo-on-github-2"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-book-in-posit-cloud",
    "href": "Appendix_Quarto.html#publish-your-quarto-book-in-posit-cloud",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.1 Publish your Quarto book in Posit Cloud",
    "text": "7.1 Publish your Quarto book in Posit Cloud\nYou can directly publish your quarto book or website to Posit Cloud. You need to create an account to enable publishing of your website.\n\nMake sure to click on the Render Book button on the Build tab to update the book with the newest changes.\nClick the Publish the application or document button (next to the Run button)\n\nCheck: https://quarto.org/docs/publishing/posit-cloud.html"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-book-in-github",
    "href": "Appendix_Quarto.html#publish-your-quarto-book-in-github",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.2 Publish your Quarto book in Github",
    "text": "7.2 Publish your Quarto book in Github\nEdit your _quarto.yml to output the generated html book into a folder.\n\nproject:\n  type: book\n  output-dir: docs\n\nThen follow the same steps below for websites"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-webiste-in-github-pages",
    "href": "Appendix_Quarto.html#publish-your-quarto-webiste-in-github-pages",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.3 Publish your Quarto webiste in Github pages",
    "text": "7.3 Publish your Quarto webiste in Github pages\nTutorial: https://github.com/jtr13/website-template.\n\nYou’ve now left the template page and are viewing your new repo on GitHub. On the home page, click Settings. Click the “Pages” section on the left. In the Build and Deployment section, set Source to “Deploy from a branch” (Classic Pages experience) and Branch to main with /docs folder. Click Save.\nClick the little gear button near “About” on the top right side of the home page of the repo and check the “Use your Github Pages website” box under “Website”. Click “Save changes”. Test the link and you should see a web site with a stick figure on it. It may take a few minutes to build so if it’s not working do a few more steps and then come back to check.\nClick the green Code button, choose “HTTPS” and copy the link below."
  },
  {
    "objectID": "Appendix_DatabaseDesign.html",
    "href": "Appendix_DatabaseDesign.html",
    "title": "8  How to Design a Database",
    "section": "",
    "text": "https://www.youtube.com/watch?v=cepspxPAUTA\nHow do NoSQL databases work? Simply Explained!\nCreate MySQL Database - MySQL Workbench Tutorial\nhttps://www.youtube.com/watch?v=K6w0bZjl_Lw"
  },
  {
    "objectID": "Appendix_Kumla_PFAS.html",
    "href": "Appendix_Kumla_PFAS.html",
    "title": "9  Loading raw data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(EnvStats)\nlibrary(ggExtra)\nlibrary(ggforce)\nlibrary(FSA)\nlibrary(Hmisc)\nlibrary(corrplot)\nlibrary(RColorBrewer)\nlibrary(pheatmap)\nlibrary(rcompanion)\nlibrary(EnvStats)\nlibrary(ggrepel)\nlibrary(ggsignif)\nlibrary(ggpubr)\nlibrary(broom)\n\noptions(scipen=999)\noptions(digits = 3)\n\n\n\n\n  #-----\n#Functions\nstanderror &lt;- function(x) {\n  se &lt;- sd(x, na.rm=TRUE)/sqrt(length(x[!is.na(x)]))\n}\n#-----\n\nPFAS_insects &lt;- as_tibble(PFAS_insects) %&gt;%\n  mutate(Group = as.factor(Group)) %&gt;%\n  mutate(ID = as.factor(ID)) %&gt;%\n  mutate(`Sampling site`= as.factor(`Sampling site`)) %&gt;%\n  mutate(`Sampling site`= fct_relevel(`Sampling site`, \"K1\", \"KS\", \"KRef\")) %&gt;%\n  mutate(Group_Family = as.factor(Group_Family)) %&gt;%\n  mutate(`Sampling site` = as.factor(`Sampling site`)) %&gt;%\n  mutate(Group = as.factor(Group)) %&gt;%\n  mutate_if(is.numeric, round, 3) #round all numeric columns\n  \n\nkumla_isotopes &lt;- as_tibble(read_excel(\"D:/Projects/PFAS-riparian/experimental/Results/2020/Kumla/20200409-R_analysis/Statistics_Kumla_20200408.xlsx\", \n                                 sheet = \"Overiew Iso\")) %&gt;%\n  mutate(Group = as.factor(Group)) %&gt;%\n  mutate(`Sampling site`= as.factor(`Sampling site`)) %&gt;%\n  mutate(Group_Family = as.factor(Group_Family)) %&gt;%\n  mutate(`Sampling site` = as.factor(`Sampling site`)) %&gt;%\n  mutate_if(is.numeric, round, 2) %&gt;% #round all numeric columns\n  select(1:8)\n\n\nkumla_isotopes_all&lt;- kumla_isotopes %&gt;%\n  group_by(Group) %&gt;%\n  summarise(n = n(),\n            min_d13C = min(delta13C), \n            min5_d13C = quantile(delta13C, 0.05),\n            mean_d13C = mean(delta13C),\n            median_d13C = quantile(delta13C, 0.5),\n            max95_d13C = quantile(delta13C, 0.95),\n            max_d13C = max(delta13C),\n            min_d15N = min(delta15N),\n            min5_d15N = quantile(delta15N, 0.05),\n            mean_d15N = mean(delta15N),\n            median_d15N = quantile(delta15N, 0.5),\n            max95_d15N = quantile(delta15N, 0.95),\n            max_d15N = max(delta15N),\n            se_d15N = standerror(delta15N),\n            se_d13C = standerror(delta13C),\n            lb_d13C = mean_d13C-se_d13C,\n            ub_d13C = mean_d13C+se_d13C,\n            lb_d15N = mean_d15N-se_d15N,\n            ub_d15N = mean_d15N+se_d15N\n        )\n\nkumla_isotopes_K1 &lt;- kumla_isotopes %&gt;%\n  filter(`Sampling site`== \"K1\") %&gt;%\n  group_by(Group) %&gt;%\n  summarise(n = n(),\n            min_d13C = min(delta13C), \n            min5_d13C = quantile(delta13C, 0.05),\n            mean_d13C = mean(delta13C),\n            median_d13C = quantile(delta13C, 0.5),\n            max95_d13C = quantile(delta13C, 0.95),\n            max_d13C = max(delta13C),\n            min_d15N = min(delta15N),\n            min5_d15N = quantile(delta15N, 0.05),\n            mean_d15N = mean(delta15N),\n            median_d15N = quantile(delta15N, 0.5),\n            max95_d15N = quantile(delta15N, 0.95),\n            max_d15N = max(delta15N),\n            se_d15N = standerror(delta15N),\n            se_d13C = standerror(delta13C),\n            lb_d13C = mean_d13C-se_d13C,\n            ub_d13C = mean_d13C+se_d13C,\n            lb_d15N = mean_d15N-se_d15N,\n            ub_d15N = mean_d15N+se_d15N\n        )\n\nkumla_isotopes_KS &lt;- kumla_isotopes %&gt;%\n  filter(`Sampling site`== \"KS\") %&gt;%\n  group_by(Group) %&gt;%\n  summarise(n = n(),\n            min_d13C = min(delta13C), \n            min5_d13C = quantile(delta13C, 0.05),\n            mean_d13C = mean(delta13C),\n            median_d13C = quantile(delta13C, 0.5),\n            max95_d13C = quantile(delta13C, 0.95),\n            max_d13C = max(delta13C),\n            min_d15N = min(delta15N),\n            min5_d15N = quantile(delta15N, 0.05),\n            mean_d15N = mean(delta15N),\n            median_d15N = quantile(delta15N, 0.5),\n            max95_d15N = quantile(delta15N, 0.95),\n            max_d15N = max(delta15N),\n            se_d15N = standerror(delta15N),\n            se_d13C = standerror(delta13C),\n            lb_d13C = mean_d13C-se_d13C,\n            ub_d13C = mean_d13C+se_d13C,\n            lb_d15N = mean_d15N-se_d15N,\n            ub_d15N = mean_d15N+se_d15N\n        )\n\nkumla_isotopes_KRef &lt;- kumla_isotopes %&gt;%\n  filter(`Sampling site`== \"KRef\") %&gt;%\n  group_by(Group) %&gt;%\n  summarise(n = n(),\n            min_d13C = min(delta13C), \n            min5_d13C = quantile(delta13C, 0.05),\n            mean_d13C = mean(delta13C),\n            median_d13C = quantile(delta13C, 0.5),\n            max95_d13C = quantile(delta13C, 0.95),\n            max_d13C = max(delta13C),\n            min_d15N = min(delta15N),\n            min5_d15N = quantile(delta15N, 0.05),\n            mean_d15N = mean(delta15N),\n            median_d15N = quantile(delta15N, 0.5),\n            max95_d15N = quantile(delta15N, 0.95),\n            max_d15N = max(delta15N),\n            se_d15N = standerror(delta15N),\n            se_d13C = standerror(delta13C),\n            lb_d13C = mean_d13C-se_d13C,\n            ub_d13C = mean_d13C+se_d13C,\n            lb_d15N = mean_d15N-se_d15N,\n            ub_d15N = mean_d15N+se_d15N\n        )\n\n\n\n\n# Colors\n## Set color palette\n# c12 &lt;- c(\n#   \"dodgerblue2\", \n#   \"#E31A1C\", # red\n#   \"#6A3D9A\", # purple\n#   \"#FF7F00\", # orange\n#   \"gold1\",\n#   \"#FB9A99\", # lt pink\n#   \"gray35\", \n#   \"maroon\", \n#   \"deeppink1\", \n#   \"blue1\", \n#   \"brown\",\n#   \"black\")\n\n\n#Alina color palette\nc12 &lt;- c(\n  \"cadetblue2\", \n  \"dodgerblue3\",\n  \"darkolivegreen2\",\n  \"darkorange\",\n  \"darkslategrey\",\n  \"forestgreen\",\n  \"goldenrod3\", \n  \"chocolate4\", \n  \"darkorchid4\", \n  \"deeppink1\", \n  \"darkslategray1\",\n  \"darkblue\")\n\n# pie(rep(1, 11), col = c11)\n\n#color\nmatrix_color &lt;- setNames(c12, c(levels(PFAS_insects$Group)))\nmatrix_color2 &lt;- setNames(c12, c(levels(kumla_isotopes$Group)))\n\n\n\n### Grouping homologs and isomers\n\nPFCAs &lt;- c(\"PFHpA\", \"PFOA\", \"PFNA\", \"PFDA\", \"PFUnDA\", \"PFDoDA\", \"PFTrDA\")\nPFSAs &lt;- c(\"PFBS\",  \"sum_PFHxS\",    \"PFHpS80\",  \"sum_PFOS\", \"PFNS80\",   \"PFDS80\",   \"PFOSA\")\nFTSAs &lt;- c(\"6_2_FTSA\",  \"8_2_FTSA\", \"10_2_FTSA\") \n# lin_PFCAs &lt;- c(\"PFBA\", \"PFPeA\", \"PFHxA\",  \"PFHpA\", \"PFOA\", \"PFNA\", \"PFDA\", \"PFUnDA\", \"PFDoDA\", \"PFTrDA\", \"PFTDA\", \"PFHxDA\", \"PFOcDA\")\n# lin_PFSAs &lt;- c(\"PFBS\",    \"PFPeS\", \"PFHxS\",   \"PFHpS\",    \"PFOS\", \"PFNS\", \"PFDS\", \"PFDoDS\")\n# FTSAs &lt;- c(\"FTSA42\",  \"FTSA62\",   \"FTSA82\")\n# lin_PFASs &lt;- c(\"PFBA\", \"PFPeA\", \"PFHxA\",  \"PFHpA\", \"PFOA\", \"PFNA\", \"PFDA\", \"PFUnDA\", \"PFDoDA\", \"PFTrDA\", \"PFTDA\", \"PFHxDA\", \"PFOcDA\",\n#             \"PFBS\",   \"PFPeS\", \"PFHxS\",   \"PFHpS\",    \"PFOS\", \"PFNS\", \"PFDS\", \"PFDoDS\",\n#             \"FTSA42\", \"FTSA62\",   \"FTSA82\")\n# \n# \nPFHxS_iso &lt;- c(\"L-PFHxS80\", \"1-PFHxS\", \"4/2-PFHxS\", \"3-PFHxS\")\nPFOS_iso &lt;- c(\"3/4/5-PFOS80/98.9\", \"6/2-PFOS169/80\", \"1-PFOS 419/169\", \"L-PFOS 99/169\")\n\n\n\n\n## END START CHUNK ## \n\n{r normality tests}\n\n\n# PFAS histograms\n\n\n# Shapiro-Wilk test for normality \n\ndf_shapiro_ID &lt;- PFAS_insects %&gt;%\n  select(ID, sum_21PFAS) %&gt;%\n  filter()\n \n\nshapiro.test(df_shapiro_ID$sum_21PFAS)\nhist(df_shapiro_ID$sum_21PFAS)\nshapiro.test(log10(df_shapiro_ID$sum_21PFAS))\n\nhist(log10(df_shapiro_ID$sum_21PFAS))\n\n\n# Shapiro-Wilk test for normality PFOS\n\ndf_shapiro &lt;- PFAS_insects %&gt;%\n  select(Group, sum_PFOS) %&gt;%\n  filter(Group == \"Emergent aquatic insects\")\n\nshapiro.test(df_shapiro$sum_PFOS)\nhist(df_shapiro$sum_PFOS)\nshapiro.test(log10(df_shapiro$sum_PFOS))\nhist(log10(df_shapiro$sum_PFOS))\n\n# Isotopes histograms\n\nkumla_isotopes %&gt;%\n  ggplot(aes(x =  delta15N)) +\n  geom_histogram(bins = 10) +\n  facet_wrap(~Group,scales = \"free\") +\n  theme_bw()\n\nkumla_isotopes %&gt;%\n  ggplot(aes(x =  delta13C)) +\n  geom_histogram(bins = 10) +\n  facet_wrap(~Group,scales = \"free\") +\n  theme_bw()\n\n\nisotope_raw_checkNormality &lt;- kumla_isotopes %&gt;%\n  select(Group, delta13C, delta15N) %&gt;%\n  filter(Group == \"Emergent aquatic insects\")\n\nshapiro.test(isotope_raw_checkNormality$delta13C)\nshapiro.test(isotope_raw_checkNormality$delta15N)\n\n\n\n# branched PFOS\n\nPFAS_insects %&gt;%\n  select(PFOS_iso) %&gt;%\n  ggplot(aes(x =  perc_sum_brPFOS)) +\n  geom_histogram(bins = 6) +\n  facet_wrap(~Matrix,scales = \"free\") +\n  theme_bw()\n\n\n{r sum_21PFAS, include=FALSE}\n# boxplot concentrations\n\n#sum21_TPFASs pond\nPFAS_insects %&gt;%\n  mutate(Group = fct_relevel(Group,\n                             \"Aquatic insect larvae\",\n                             \"Emergent aquatic insects\",\n                             \"Terrestrial invertebrate consumers\",\n                             \"Sediment\",\n                             \"Earthworms\",\n                             \"Water\")) %&gt;%\n  filter(Group != \"Water\") %&gt;%\n  ggplot(mapping = aes(x = Group,\n                       y = sum_21PFAS, fill = Group)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.5) + \n  geom_boxplot(outlier.colour = \"white\") +\n  geom_jitter(shape = 1, position = position_jitter(0.2)) +\n  scale_fill_manual(values = matrix_color) +\n  scale_x_discrete(labels = function(Group) str_wrap(Group, width = 10)) + \n  stat_summary(fun=mean, colour=\"black\", geom=\"point\", \n               shape=18, size=3,show.legend = FALSE) +\n   labs(x = NULL, y = expression(paste(Sigma, \"PFASs (\",\"ng g\"^{-1}, \" dw)\"))) +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank())+\n  facet_wrap(.~`Sampling site`, scales = \"free_y\")\n\n\n\n\n{r isotopes}\n\n#--------------------------------------\n\n#All sites\nkumla_isotopes %&gt;%\nggplot() +\n  geom_point(aes(x = delta13C, y = delta15N, color = Group, shape = `Sampling site`), size = 3, alpha = 0.5) + # raw points\n  scale_color_manual(name = \"Group\", values = matrix_color) +\n  scale_x_continuous(name = expression(paste(delta^{13},\"C (\\u2030)\"))) + \n  scale_y_continuous(name = expression(paste(delta^{15},\"N (\\u2030)\"))) + \n  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),\n  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +\n  geom_errorbar(data = kumla_isotopes_all, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +\n  geom_errorbarh(data = kumla_isotopes_all, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +\n  theme_bw(base_size = 16, base_family=\"serif\") + \n  theme(axis.text=element_text(size = 16),\n        legend.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n        legend.text = element_text(size = 14),\n        #legend.position= c(0.85, 0.25),\n        legend.background = element_blank(),\n        legend.box.background = element_rect(colour = \"black\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n  #facet_wrap(.~ `Sampling site`, scales = \"fixed\") # mean and error bar not correctly mapped\n\n\n\n\n#Individual sites: K1\nkumla_isotopes %&gt;%\n  filter(`Sampling site` == \"K1\") %&gt;%\nggplot() +\n  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points\n  scale_color_manual(name = \"Group\", values = matrix_color) +\n  scale_x_continuous(name = expression(paste(delta^{13},\"C (\\u2030)\"))) + \n  scale_y_continuous(name = expression(paste(delta^{15},\"N (\\u2030)\"))) + \n  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),\n  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +\n  geom_errorbar(data = kumla_isotopes_K1, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +\n  geom_errorbarh(data = kumla_isotopes_K1, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +\n  theme_bw(base_size = 16, base_family=\"serif\") + \n  theme(axis.text=element_text(size = 16),\n        legend.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n        legend.text = element_text(size = 14),\n        #legend.position= c(0.85, 0.25),\n        legend.background = element_blank(),\n        legend.box.background = element_rect(colour = \"black\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n  #facet_wrap(.~ `Sampling site`, scales = \"fixed\") # mean and error bar not correctly mapped\n\n#Individual sites: KS\nkumla_isotopes %&gt;%\n  filter(`Sampling site` == \"KS\") %&gt;%\n  filter(`Full ID` != \"K2 SW T1 trichoptera\") %&gt;% #remove trichoptera which had very low 13C\nggplot() +\n  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points\n  scale_color_manual(name = \"Group\", values = matrix_color) +\n  scale_x_continuous(name = expression(paste(delta^{13},\"C (\\u2030)\"))) + \n  scale_y_continuous(name = expression(paste(delta^{15},\"N (\\u2030)\"))) + \n  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),\n  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +\n  geom_errorbar(data = kumla_isotopes_KS, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +\n  geom_errorbarh(data = kumla_isotopes_KS, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +\n  theme_bw(base_size = 16, base_family=\"serif\") + \n  theme(axis.text=element_text(size = 16),\n        legend.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n        legend.text = element_text(size = 14),\n        #legend.position= c(0.85, 0.25),\n        legend.background = element_blank(),\n        legend.box.background = element_rect(colour = \"black\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n  #facet_wrap(.~ `Sampling site`, scales = \"fixed\") # mean and error bar not correctly mapped\n\nkumla_isotopes %&gt;%\n  filter(`Sampling site` == \"KS\") %&gt;%\n  plot_ly(x = ~delta13C, y = ~delta15N, color = ~Group) %&gt;%\n  add_markers(text = ~ `Full ID`)\n\n#Individual sites: KRef\nkumla_isotopes %&gt;%\n  filter(`Sampling site` == \"KRef\") %&gt;%\nggplot() +\n  geom_point(aes(x = delta13C, y = delta15N, color = Group), size = 3, alpha = 0.5) + # raw points\n  scale_color_manual(name = \"Group\", values = matrix_color) +\n  scale_x_continuous(name = expression(paste(delta^{13},\"C (\\u2030)\"))) + \n  scale_y_continuous(name = expression(paste(delta^{15},\"N (\\u2030)\"))) + \n  #geom_text_repel(aes(x = mean_d13C, y = mean_d15N, color = Matrix, label = Matrix),\n  #                point.padding = 0.85, size = 5, show.legend = FALSE, nudge_x = 0.5, nudge_y = 0.5) +\n  geom_errorbar(data = kumla_isotopes_KRef, aes(x = mean_d13C, y = mean_d15N, color = Group, ymin = lb_d15N, ymax = ub_d15N), size = 1) +\n  geom_errorbarh(data = kumla_isotopes_KRef, aes(x = mean_d13C, y = mean_d15N, color = Group, xmin = lb_d13C, xmax = ub_d13C), size = 1) +\n  theme_bw(base_size = 16, base_family=\"serif\") + \n  theme(axis.text=element_text(size = 16),\n        legend.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n        legend.text = element_text(size = 14),\n        #legend.position= c(0.85, 0.25),\n        legend.background = element_blank(),\n        legend.box.background = element_rect(colour = \"black\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n  #facet_wrap(.~ `Sampling site`, scales = \"fixed\") # mean and error bar not correctly mapped\n\n\n\n\n\n{r isomers, include=FALSE, warning=FALSE, eval=FALSE}\n\n\n# %br PFOS Pond\n\n\nPFAS_insects %&gt;% \nmutate(perc_sum_brPFOS = sum_brPFOS/sum_PFOS*100) %&gt;%\n  ggplot(mapping = aes(x = reorder(Group, perc_sum_brPFOS, FUN = median), \n                               y = perc_sum_brPFOS, fill = Group)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.4) + \n  geom_boxplot(outlier.colour = \"white\") +\n  scale_fill_manual(values = matrix_color) +\n  geom_jitter(shape = 1, position = position_jitter(0.2)) +\n  labs(x = NULL, y = \"Percent of branched PFOS (%)\") +\n  coord_flip() +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  facet_grid(`Sampling site` ~., scales = \"free_y\")\n\n# %br PFHxS Pond\n# only those samples with a percentage above zero i.e. detected branched PFHxS\nperc_sum_br_PFHxS &lt;- sum_brPFHxS/sum_PFHxS*100\nPFAS_insects %&gt;%\n  filter(sum_brPFHxS &gt; 0.2) %&gt;%\n  mutate(perc_sum_br_PFHxS = sum_brPFHxS/sum_PFHxS*100) %&gt;%\n  ggplot(mapping = aes(x = reorder(Group, perc_sum_br_PFHxS, FUN = median), \n                               y = perc_sum_br_PFHxS, fill = Group)) +\n  stat_boxplot(geom =\"errorbar\", width = 0.4) + \n  geom_boxplot(outlier.colour = \"white\") +\n  scale_fill_manual(values = matrix_color) +\n  geom_jitter(shape = 1, position = position_jitter(0.2)) +\n  labs(x = NULL, y = \"Percent of branched PFOS (%)\") +\n  coord_flip() +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  facet_grid(`Sampling site` ~., scales = \"free_y\")\n\n\n\n{r adult/larvae, include=FALSE}\n\n\n\n  \n\n\nANOVA and post hocs for d15N and d13C isotopes\n\nValues sharing a letter are not significantly different\n\n{r Kruskal Wallis Dunn post hoc}\n\n#------------ISotopes \n\n\n#---------sumPFAS\n\nconc_PFAS_pond &lt;- conc_PFAS %&gt;%\n  filter(Site == \"Pond\") %&gt;%\n  filter(!Matrix %in% c(\"Water\", \"Part. matter\")) %&gt;%\n  filter(!Matrix %in% c(\"Sed.\", \"Soil\", \"Aq. plants\", \"Aq. biofilm\", \"Aq. biofilm water\")) %&gt;%\n  mutate(Matrix = as.factor(Matrix))\n  # %&gt;%\n  # group_by(Matrix) %&gt;%\n  # tally()\n\nkruskal.test(conc_PFAS_pond$Sum24_TPFASs ~ conc_PFAS_pond$Matrix)\nPT_PFAS &lt;- dunnTest(Sum24_TPFASs ~ Matrix, data = conc_PFAS_pond, method = \"bh\")\nPT_PFAS &lt;- PT_PFAS$res\ncldList(comparison = PT_PFAS$Comparison,\n        p.value    = PT_PFAS$P.adj,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n\n## Pond vs creek of sumPFAS for terr. predators\nconc_PFAS_terr_pred_pond &lt;- conc_PFAS %&gt;%\n  filter(Matrix == \"Terr. inv. predators\") %&gt;%\n  filter(Site == \"Pond\")\n\nconc_PFAS_terr_pred_creek &lt;- conc_PFAS %&gt;%\n  filter(Matrix == \"Terr. inv. predators\") %&gt;%\n  filter(Site == \"Sörbybäcken\")\n\n# t-test on aquatic vs terrestrial for pond\nt.test(conc_PFAS_terr_pred_pond$Sum24_TPFASs, conc_PFAS_terr_pred_creek$Sum24_TPFASs, alternative = \"two.sided\", var.equal = F)\nwilcox.test(conc_PFAS_terr_pred_pond$Sum24_TPFASs, conc_PFAS_terr_pred_creek$Sum24_TPFASs)\n\n## PFOS\n\nkruskal.test(conc_PFAS_pond$PFOS ~ conc_PFAS_pond$Matrix)\nPT_PFOS &lt;- dunnTest(PFOS ~ Matrix, data = conc_PFAS_pond, method = \"bh\")\nPT_PFOS &lt;- PT_PFOS$res\ncldList(comparison = PT_PFOS$Comparison,\n        p.value    = PT_PFOS$P.adj,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n\n\n\n\n\n#-------branched isomers\n#brPFOS\n\nisomer_PFOS_pond &lt;- isomer_PFOS %&gt;%\n  filter(Site == \"Pond\") %&gt;%\n  filter(!matrix %in% c(\"Sed.\", \"Soil\", \"Aq. plants\"))\n  # group_by(matrix) %&gt;%\n  # tally()\n  \nkruskal.test(isomer_PFOS_pond$perc_sum_br_PFOS ~ isomer_PFOS_pond$Matrix)\nPT_brPFOS &lt;- dunnTest(perc_sum_br_PFOS ~ matrix, data = isomer_PFOS_pond, method = \"bh\")\nPT_brPFOS &lt;- PT_brPFOS$res\ncldList(comparison = PT_brPFOS$Comparison,\n        p.value    = PT_brPFOS$P.adj,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n# gives non-sign difference between part matter and water which is strange. check using Mann-Whitney\n\nisomer_PFOS_pond_MannU &lt;- isomer_PFOS_pond %&gt;%\n  select(Matrix, perc_sum_br_PFOS) %&gt;%\n  filter(Matrix == \"Part. matter\" | Matrix == \"Water\")\n\npartMater &lt;- isomer_PFOS_pond_MannU %&gt;%\n  filter(Matrix == \"Part. matter\") %&gt;%\n  select(perc_sum_br_PFOS) %&gt;%\n  as_vector()\n\nwater &lt;- isomer_PFOS_pond_MannU %&gt;%\n  filter(Matrix == \"Water\") %&gt;%\n  select(perc_sum_br_PFOS) %&gt;%\n  as_vector()\n\n\nwilcox.test(water, partMater)\n\n\n# Tukey HSD\nisomer_anova &lt;- tidy(TukeyHSD(aov(perc_sum_br_PFOS ~ Matrix, data = isomer_PFOS_pond)))\ncldList(comparison = isomer_anova$comparison,\n        p.value    = isomer_anova$adj.p.value,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n#brPFHxS\n\nisomer_PFHxS_pond &lt;- isomer_PFHxS %&gt;%\n  filter(Site == \"Pond\") %&gt;%\n  filter(brPFHxS_perc &gt; 0) %&gt;%\n  filter(!Matrix %in% c(\"Sed.\", \"Soil\", \"Aq. plants\"))\n  # group_by(Matrix) %&gt;%\n  # tally()\n  \nkruskal.test(isomer_PFHxS_pond$brPFHxS_perc ~ isomer_PFHxS_pond$Matrix)\nPT_brPFHxS &lt;- dunnTest(brPFHxS_perc ~ Matrix, data = isomer_PFHxS_pond, method = \"bh\")\nPT_brPFHxS &lt;- PT_brPFHxS$res\ncldList(comparison = PT_brPFHxS$Comparison,\n        p.value    = PT_brPFHxS$P.adj,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n\n\n\n#BAF aq\nBAF_aq_PFOS_pond &lt;- BAF_aq_PFOS %&gt;% filter(Site == \"Pond\") %&gt;% select(1, 8:12)\nBAF_aq_PFOS_pond_long &lt;- BAF_aq_PFOS_pond %&gt;% pivot_longer(-Name, names_to = \"isomer\", values_to = \"concentration\") %&gt;% mutate(isomer = as.factor(isomer))\nBAF_aq_PFHxS_pond &lt;- BAF_aq_PFHxS %&gt;% filter(Site == \"Pond\") %&gt;% select(1, 8:9)\nBAF_aq_PFHxS_pond_long &lt;- BAF_aq_PFHxS_pond %&gt;% pivot_longer(-Name, names_to = \"isomer\", values_to = \"concentration\")\n\n# Better documentation of what is done!: test something something...\nkruskal.test(list(BAF_aq_PFOS_pond$`dimetyl 80/99`, BAF_aq_PFOS_pond$`3/4/5-PFOS80/98.9`, BAF_aq_PFOS_pond$`6/2-PFOS169/80`,\n                  BAF_aq_PFOS_pond$`1-PFOS 419/169`, BAF_aq_PFOS_pond$`L-PFOS 99/169`))\n\n\nPT_BAF_PFOS &lt;- dunnTest(concentration ~ isomer, data = BAF_aq_PFOS_pond_long, method = \"bh\")\nPT_BAF_PFOS &lt;- PT_BAF_PFOS$res\ncldList(comparison = PT_BAF_PFOS$Comparison,\n        p.value    = PT_BAF_PFOS$P.adj,\n        threshold  = 0.05,\n        remove.space = TRUE)\n\n# Difference of BAF between PFHxS isomers\nkruskal.test(list(BAF_aq_PFHxS_pond$`L-PFHxS80`, BAF_aq_PFHxS_pond$`4/2-PFHxS`))\n\n\n\nCorrelations\n\n{r correlation}\nconc_PFAS %&gt;%\n  filter(Site == \"Pond\") %&gt;% \n  ggplot(aes(x = PFOS, y = `PFHxS`)) +\n  geom_point(aes(colour = Group_Order), size = 3, show.legend = NA) +\n  facet_wrap(~Matrix, scales = \"free\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\n  \n\nres &lt;- conc_PFAS %&gt;%\n  filter(Site == \"Pond\") %&gt;%\n  select(ID, PFBA, PFPeA, PFHxA, PFHpA, PFOA, PFNA, PFDA, PFUnDA, PFBS, PFPeS, PFHxS, PFHpS, PFOS, PFNS, PFDS, `6_2 FTSA`)\n\nres &lt;- as.matrix(column_to_rownames(res, var = \"ID\"))\n\nres2 &lt;- cor(res, method = \"spearman\")\n\ncorrplot(res2, \n         method = \"circle\",\n         type = \"full\", \n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         sig.level = 0.05,\n         insig = \"pch\",\n         tl.col = \"black\", \n         tl.srt = 45)  \n  \ncorrplot.mixed(res2,\n               lower = \"number\",\n               upper = \"circle\",\n               lower.col = \"black\",\n               number.cex = 0.75,\n               tl.cex = 0.8\n               )\n  \npheatmap(res2,\n         cluster_rows = TRUE,\n         cluster_cols = TRUE,\n         scale = \"none\",\n         clustering_distance_rows = \"euclidean\",\n         clustering_method = \"ward.D\"\n         )\n    \n\n\nBAFs\n\n{r BAFs}\n\n##PFSAs\n\nBAF_aq %&gt;%\n  select(Name, Site, Matrix, Class, Order, PFSAs) %&gt;%\n  pivot_longer(cols = PFSAs, names_to = \"Homolog\", values_to = \"BAF\") %&gt;%\n  mutate(Homolog = as_factor(Homolog)) %&gt;%\n  ggplot(aes(x = Homolog, y = BAF)) +\n  geom_point(aes(color = Order)) +\n  facet_wrap(~Order, scales = \"free_y\") +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n\n#PFCAs\nBAF_aq %&gt;%\n  select(Name, Site, Matrix, Class, Order, PFCAs) %&gt;%\n  pivot_longer(cols = PFCAs, names_to = \"Homolog\", values_to = \"BAF\") %&gt;%\n  mutate(Homolog = as_factor(Homolog)) %&gt;%\n  ggplot(aes(x = Homolog, y = BAF)) +\n  geom_point(aes(color = Order)) +\n  facet_wrap(~Order, scales = \"free_y\") +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n\n\n#FTSAs\nBAF_aq %&gt;%\n  select(Name, Site, Matrix, Class, Order, FTSAs) %&gt;%\n  pivot_longer(cols = FTSAs, names_to = \"Homolog\", values_to = \"BAF\") %&gt;%\n  mutate(Homolog = as_factor(Homolog)) %&gt;%\n  ggplot(aes(x = Homolog, y = BAF)) +\n  geom_point(aes(color = Order)) +\n  facet_wrap(~Order, scales = \"free_y\") +\n  theme_bw(base_family=\"serif\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", size = 14, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        axis.text.y = element_text(color = \"black\", size = 14, angle = 0, hjust = 1, vjust = 0, face = \"plain\"),\n        axis.title.x = element_text(color = \"black\", size = 16, angle = 0, hjust = .5, vjust = 0, face = \"plain\"),\n        axis.title.y = element_text(color = \"black\", size = 16, angle = 90, hjust = .5, vjust = .5, face = \"plain\"),\n        panel.grid.major = element_blank(), panel.grid.minor = element_blank())"
  }
]