[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "",
    "text": "1 Course content\nThis is the handbook for the PhD course on R for environmental chemistry data analysis"
  },
  {
    "objectID": "index.html#recommended-literature",
    "href": "index.html#recommended-literature",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "1.1 Recommended literature:",
    "text": "1.1 Recommended literature:\nIntroduction to Programming with R. https://discdown.org/rprogramming/introduction.html\nHands-On Programming with R. https://rstudio-education.github.io/hopr/\nR for Data Science (2e). Hadley Wickham. Freely available at: https://r4ds.hadley.nz/\nR for Data Science: Exercise Solutions. https://jrnold.github.io/r4ds-exercise-solutions/\nR Graphics Cookbook, 2nd edition. Winston Chang. Freely available at: https://r-graphics.org/\nPosit Cheatsheets: https://posit.co/resources/cheatsheets/\nStatistical Inference via Data Science: A ModernDive into R and the Tidyverse. https://moderndive.com/index.html\nInteractive web-based data visualization with R, plotly, and shiny. https://plotly-r.com/\nData Visualization: A practical introduction. Kieran Healy. https://socviz.co/\nMastering Software Development in R: https://bookdown.org/rdpeng/RProgDA/\nTo learn more about Quarto books visit:\n\nhttps://quarto.org/docs/books\nhttps://r4ds.hadley.nz/quarto.html\nhttps://quarto.org/docs/computations/execution-options.html\n\nSome useful links to other R for data science books:\n\nhttps://www.r4epi.com/installing-r-and-rstudio"
  },
  {
    "objectID": "index.html#plan-for-course",
    "href": "index.html#plan-for-course",
    "title": "R for Environmental Chemistry Data Analysis",
    "section": "1.2 Plan for course",
    "text": "1.2 Plan for course\nThe final report will be an online book with chapters with one containing a learning diary, and others should contain a scientific report documenting the descriptive analysis and visualization of environmental chemistry relevant data sets.\nStart with R software\nhttps://moderndive.com/1-getting-started.html\n\nInstall R and RStudio\nInstall RTools\n\n-Install packages\n-Managing R with .Rprofile,..: https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf\n\n1.2.0.1 Basic R\n\nBasic concepts\nData types: vector, dataframe, list,…\nUsing base R functions: c, paste,..\nUsing functions from installed packages\n\n– library()\n– Use help “?”\n\nIf statements, for loops\nBasic plotting\nImporting excel, csv,..\n\nUsing version control with Git and Github\n\nVersion Control with Git and SVN: https://support.posit.co/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN\nHappy Git and GitHub for the user: https://happygitwithr.com/\n\nWriting and creating markdown documents\n\nMarkdown syntax: https://quarto.org/docs/authoring/markdown-basics.html\nQuarto Books: https://quarto.org/docs/books/\nQuarto blog: https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html\n\n\n\n1.2.0.2 Tidyverse\n\nTidyverse concepts\nThe pipe: %&gt;% or |&gt;  https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/\nggplot2: https://ggplot2.tidyverse.org/\ndplyr: https://dplyr.tidyverse.org/\npivot\n\n\n\ntidyr: https://tidyr.tidyverse.org/\nreadr, readxl: https://readr.tidyverse.org/ ; https://readxl.tidyverse.org/\n\n\n\n1.2.0.3 Interactive plotting with R\n\nJavascript and htmlwidgets: https://www.htmlwidgets.org/\nPlotly: https://plotly.com/r/  \nDT: https://rstudio.github.io/DT/\n\n\n\n1.2.0.4 Statistics\n\nBasic stats\nComparison between groups (t-test, K-W, ANOVA,…)\nRegression/correlation\nMultivariate statistics (PCA, HCA,…)\n\n\n\n1.2.0.5 ChatGPT\n\n\n1.2.0.6 Database (optional)\n-        Relational database management system, MySQL\no   https://www.hostinger.com/tutorials/database-schema\no   …\n-        dbplyr: https://dbplyr.tidyverse.org/\nThis handbook uses the following packages:\n\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(DiagrammeR)"
  },
  {
    "objectID": "1_Basic_R.html#data-types-in-r",
    "href": "1_Basic_R.html#data-types-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.1 Data types in R",
    "text": "2.1 Data types in R\nBasic data types in R can be divided into the following types:\n\nnumeric : (10.5, 55, 787)\ninteger (a.k.a. double) : (1L, 55L, 100L, where the letter “L” declares this as an integer)\ncomplex : (9 + 3i, where “i” is the imaginary part)\ncharacter (a.k.a. string) : (“k”, “R is exciting”, “FALSE”, “11.5”)\nlogical (a.k.a. boolean) : (TRUE or FALSE)\n\nWe can use the class() function to check the data type of a variable:\nNumeric (also called double)\n\nx &lt;- 10.5\nclass(x)\n\n[1] \"numeric\"\n\n\nInteger\n\nx &lt;- 1000L\nclass(x)\n\n[1] \"integer\"\n\n\nComplex\n\n# We will not deal with complex data in this course\nx &lt;- 9i + 3\nclass(x)\n\n[1] \"complex\"\n\n\nCharacter/String\n\nx &lt;- \"Hello World\"\n\n# You can also use str() to check the data type of an object. This function will give more detailed information about the elements in the object\nstr(x)\n\n chr \"Hello World\"\n\n\nLogical/Boolean\n\n# a vector of logical/boolean\nx &lt;- c(TRUE, FALSE)\n\nstr(x)\n\n logi [1:2] TRUE FALSE\n\n\nIf you concatenate elements of different data types in a vector, then R will convert the elements in the following order: 1. string; 2. numeric; 3. integer; 4. logical. It means that all other data types will be converted to a string if you combine these elements with a string element.\n\n# If you want to create (or convert) an object of a specific data type, then use the as.xxx functions.\n\na_string &lt;- as.character(\"A Space Odyssey\")\n# You can also skip the as.character and directly use: a_string &lt;- \"A Space Odyssey\". R will recognize is as a string and automatically choose the correct data type.\na_integer &lt;- as.integer(2001)\na_numeric &lt;- as.numeric(99.999)\na_logical &lt;-  as.logical(TRUE)\n\n\n\nc(a_integer, a_string)\n\n[1] \"2001\"            \"A Space Odyssey\"\n\nc(a_integer, a_numeric)\n\n[1] 2001.000   99.999\n\nc(a_integer, a_logical)\n\n[1] 2001    1\n\n\nYou cannot create a datatype that R doesn’t recognize\n\nobject1 &lt;- as.integer(\"Hello\")\n\nWarning: NAs introduced by coercion\n\nstr(object1)\n\n int NA"
  },
  {
    "objectID": "1_Basic_R.html#data-structures-in-r",
    "href": "1_Basic_R.html#data-structures-in-r",
    "title": "2  Familiarize yourself with R",
    "section": "2.2 Data structures in R",
    "text": "2.2 Data structures in R\nBelow are some basic data structures in R:\n\nvectors\nlists\nmatrices\ndataframes\nfactors\n\nVectors\n\nvectors: also called atomic vectors, where all elements must be of the same basic data types.\n\n\n# A string vector\na_vector_strings &lt;- c(\"This\", \"is\", \"a\", \"vector\", \"of\", \"string\", \"elements\")\nstr(a_vector_strings)\n\n chr [1:7] \"This\" \"is\" \"a\" \"vector\" \"of\" \"string\" \"elements\"\n\n\n\n# integer vectors\na_vector_integers1 &lt;- c(99, 98)\na_vector_integers2 &lt;- c(1, 2, 3, 4, 5)\n\nstr(a_vector_integers1)\n\n num [1:2] 99 98\n\n\nWhat happens when we perform operations with two or more vectors of different length? First, we can use the length() function to check the length of an object\n\nlength(a_vector_integers1)\n\n[1] 2\n\nlength(a_vector_integers2)\n\n[1] 5\n\n\nWe can use == as an equal operator to check if both vectors have the same length\n\nlength(a_vector_integers1) == length(a_vector_integers2)\n\n[1] FALSE\n\n\nWe can see that this will be FALSE since the length of the two vectors are not equal.\nThe opposite is to use the `!=` (not equal to) operator:\n\nlength(a_vector_integers1)!= length(a_vector_integers2)\n\n[1] TRUE\n\n\nFinally, we can see that when performing addition operation of a_vector_integers1 (99, 98) with a_vector_integers2 (1, 2, 3, 4, 5), R will recycle the shorter vector\n\ncombine_vectors &lt;- a_vector_integers1 + a_vector_integers2\n\nWarning in a_vector_integers1 + a_vector_integers2: longer object length is not\na multiple of shorter object length\n\nstr(combine_vectors)\n\n num [1:5] 100 100 102 102 104\n\n\nR will therefore perform the element-wise operations 99+1, 98+2, 99+3, 98+4, 99+5, and the resulting object will have the same length as a_vector_integers2.\nMatrices\nA matrix is a 2 dimensional data structure for vectors of the same datatype.\nLists\nWe can also store elements of different datatypes in list objects.\n\na_vector_integers1 &lt;- c(99, 98)\n\na_vector_strings &lt;- c(\"This\", \"is\", \"a\", \"vector\", \"of\", \"string\", \"elements\")\n\n# In this case, we use the list() function.\na_list &lt;- list(vec_int = a_vector_integers1, \n               vec_str = a_vector_strings)\n\n# If you dont name the elements within the list then these will be unamed.\n\nTo subset an element within the list you can use index (rspatial_indexing?). There is difference between single [] and double brackets[[]]. Can you see the differences between the below indexing?\n\na_list[1]\n\n$vec_int\n[1] 99 98\n\n\n\na_list[[1]]\n\n[1] 99 98\n\n\n\na_list[1][1]\n\n$vec_int\n[1] 99 98\n\n\n\na_list[[1]][1]\n\n[1] 99\n\n\nYou can also use the name of the element for subsetting.\n\na_list[\"vec_int\"]\n\n$vec_int\n[1] 99 98\n\n\nThe dollar-sign $ can also be used.\n\n# These three subsetting operations will give the same results\na_list$vec_int\n\n[1] 99 98\n\na_list[\"vec_int\"]\n\n$vec_int\n[1] 99 98\n\na_list[[1]]\n\n[1] 99 98\n\n\nDataframes\nDataframes are similar as lists but flattened into a rectangular form, similar as tables. The length of individual objects have to be the same.\n\nsample_data &lt;- data.frame(sample_id = c(1, 2, 3, 4),\n                          sample_name = c(\"Inflow\", \"Mid_stream\", \"Outflow\", \"River\"),\n                          measured_PFOS = c(TRUE, TRUE, TRUE, FALSE),\n                          conc_PFOS_ngL = c(99, 5, 123, NA))\n\nFactors\n\n2.2.1 Object types in R\n(from https://discdown.org/rprogramming/vectors.html)\nR is an object-oriented programming language with the fundamental design principle: Everything in R is an object. In R, objects can be:\n\nVariables (e.g., a, b, result).\nFunctions (e.g., mean(), max(), sin()).\nConnection handlers.\n…\n\n\n\n2.2.2 Operators in R\nThe different comparison operators will be handy for various data analysis:\nSee: https://www.w3schools.com/r/r_operators.asp\nComparison operators\n\n\n\nOperator\nName\n\n\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n=&gt;\nequal or greater than\n\n\n=&lt;\nequal or less than\n\n\n&gt;\ngreater than\n\n\n&lt;\nless than\n\n\n\nArithmetic Operators\n\n\n\nOperator\nName\nExample\n\n\n\n\n+\nAddition\nx + y\n\n\n-\nSubtraction\nx - y\n\n\n*\nMultiplication\nx * y\n\n\n/\nDivision\nx / y\n\n\n^\nExponent\nx ^ y\n\n\n%%\nModulus (Remainder from division)\nx %% y\n\n\n%/%\nInteger Division\nx%/%y\n\n\n\nLogical Operators\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&\nElement-wise Logical AND operator. It returns TRUE if both elements are TRUE\n\n\n&&\nLogical AND operator - Returns TRUE if both statements are TRUE\n\n\n|\nElementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE\n\n\n||\nLogical OR operator. It returns TRUE if one of the statement is TRUE.\n\n\n!|\nLogical NOT - returns FALSE if statement is TRUE\n\n\n\nOther useful operators\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\n\n\n\n\n:\nCreates a series of numbers in a sequence\n1:10 (creates a sequence from 1 to 10)\n\n\n%in%\nFind out if an element belongs to a vector\n2%in%1:10 (check if 2 is found in the vector 1:10, evaluates to TRUE )\n\n\n%*%\nMatrix Multiplication\nm &lt;- matrix(1:8, nrow=2); 2*m (will multiply every element with 2)\n\n\n\n\n\n2.2.3 Loading or importing data files\nhttps://r-graphics.org/loading-a-delimited-text-data-file https://r-graphics.org/loading-data-from-an-excel-file\n\n\n2.2.4 Basic plots"
  },
  {
    "objectID": "2_Conditions_Loops.html",
    "href": "2_Conditions_Loops.html",
    "title": "3  Conditional statements: if, else, switch()",
    "section": "",
    "text": "Check: https://discdown.org/rprogramming/conditional-execution.html\n´If´ statements tell R to run a line of code if a condition returns TRUE and also another line of code if the condition returns FALSE. For example:\nIF (A = TRUE)\nthen B\nelse C\nHere is an anology to an environmental pollutant case.\n\n# https://graphviz.org/doc/info/shapes.html\n\nDiagrammeR::grViz(\"\ndigraph condition_PFOS {\n\n# node definitions with substituted label text\nnode [fontname = Helvetica]\na [label = '@@1', shape = 'box']\nb [label = '@@2', shape = 'box']\nc [label = '@@3']\nd [label = '@@4']\n\n\n# edge definitions with the node IDs\na -&gt; b [label = 'IF']\nb -&gt; c [label = 'TRUE']\nb -&gt; d [label = 'ELSE']\n}\n\n[1]: 'Pollutant level'\n[2]: 'Higher than threshold level'\n[3]: 'Take actions'\n[4]: 'No actions'\n\")"
  },
  {
    "objectID": "Appendix_Version_control.html",
    "href": "Appendix_Version_control.html",
    "title": "6  Version control using Git and Github",
    "section": "",
    "text": "6.0.1 Step-by-step instructions\nThis guide to install and use Git and Github follows the guide: https://happygitwithr.com\nYou should consult this website for more detailed instructions.\n\n\n6.0.2 1. Register a Github account\nRegister a github account: https://github.com\n\n\n6.0.3 2. Install Git\na. Download git for Windows here: https://gitforwindows.org/\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”.\nNote that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention.\n\nb. Install a Git client, such as GithubDesktop: https://desktop.github.com/\n\n\n6.0.4 3. Set up keys for SSH\na. Create an SSH key pair\n\nIn RStudio, go to Tools &gt; Global Options…&gt; Git/SVN &gt; Create RSA Key….\n\nPassphrase is optional and needed when you want extra security\n\nAfter setting up the SSH key, Go to Tools &gt; Global Options…&gt; Git/SVN. click “View public key”. Copy the key text to your clipboard (Ctrl+c).\n\nb. On Github: - Click on your profile pic in upper right corner - Go to Settings &gt; SSH and GPG keys. Click “New SSH key”. - Paste your public key in the “Key” box. Give it an informative title, presumably repeating the descriptive comment (such as RStudio_LiU) you used above, during key creation. - Click “Add SSH key”.\n\n\n6.0.5 4. Connect your project to GitHub\nIt is recommended to first create a new repository in Github and then link it to a new project in Rstudio GitHub first, then RStudio or link an existing project to the created repository Existing project, GitHub first\n\na. GitHub first, then RStudio: follow these steps: https://happygitwithr.com/new-github-first#make-a-repo-on-github-2"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-book-in-posit-cloud",
    "href": "Appendix_Quarto.html#publish-your-quarto-book-in-posit-cloud",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.1 Publish your Quarto book in Posit Cloud",
    "text": "7.1 Publish your Quarto book in Posit Cloud\nYou can directly publish your quarto book or website to Posit Cloud. You need to create an account to enable publishing of your website.\n\nMake sure to click on the Render Book button on the Build tab to update the book with the newest changes.\nClick the Publish the application or document button (next to the Run button)\n\nCheck: https://quarto.org/docs/publishing/posit-cloud.html"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-book-in-github",
    "href": "Appendix_Quarto.html#publish-your-quarto-book-in-github",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.2 Publish your Quarto book in Github",
    "text": "7.2 Publish your Quarto book in Github\nEdit your _quarto.yml to output the generated html book into a folder.\n\nproject:\n  type: book\n  output-dir: docs\n\nThen follow the same steps below for websites"
  },
  {
    "objectID": "Appendix_Quarto.html#publish-your-quarto-webiste-in-github-pages",
    "href": "Appendix_Quarto.html#publish-your-quarto-webiste-in-github-pages",
    "title": "7  Publish your data analysis in Quarto",
    "section": "7.3 Publish your Quarto webiste in Github pages",
    "text": "7.3 Publish your Quarto webiste in Github pages\nTutorial: https://github.com/jtr13/website-template.\n\nYou’ve now left the template page and are viewing your new repo on GitHub. On the home page, click Settings. Click the “Pages” section on the left. In the Build and Deployment section, set Source to “Deploy from a branch” (Classic Pages experience) and Branch to main with /docs folder. Click Save.\nClick the little gear button near “About” on the top right side of the home page of the repo and check the “Use your Github Pages website” box under “Website”. Click “Save changes”. Test the link and you should see a web site with a stick figure on it. It may take a few minutes to build so if it’s not working do a few more steps and then come back to check.\nClick the green Code button, choose “HTTPS” and copy the link below."
  },
  {
    "objectID": "Appendix_DatabaseDesign.html",
    "href": "Appendix_DatabaseDesign.html",
    "title": "8  How to Design a Database",
    "section": "",
    "text": "https://www.youtube.com/watch?v=cepspxPAUTA\nHow do NoSQL databases work? Simply Explained!\nCreate MySQL Database - MySQL Workbench Tutorial\nhttps://www.youtube.com/watch?v=K6w0bZjl_Lw"
  }
]