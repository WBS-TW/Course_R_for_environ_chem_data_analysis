---
Title: Basic R
output: html_document
number-sections: true
editor_options: 
  chunk_output_type: console
---

# Familiarize yourself with R

## [Data types]{.underline} in R

Basic data types in R can be divided into the following types:

-   `numeric` : (10.5, 55, 787)

-   `integer` (a.k.a. double) : (1L, 55L, 100L, where the letter "L" declares this as an integer)

-   `complex` : (9 + 3i, where "i" is the imaginary part)

-   `character` (a.k.a. string) : ("k", "R is exciting", "FALSE", "11.5")

-   `logical` (a.k.a. boolean) : (TRUE or FALSE)

We can use the `class()` function to check the data type of a variable:

Numeric (also called double)

```{r}
x <- 10.5
class(x)

```

Integer

```{r}

x <- 1000L
class(x)

```

Complex

```{r}
# We will not deal with complex data in this course
x <- 9i + 3
class(x)
```

Character/String

```{r}

x <- "Hello World"

# You can also use str() to check the data type of an object. This function will give more detailed information about the elements in the object
str(x)
```

Logical/Boolean

```{r}

# a vector of logical/boolean
x <- c(TRUE, FALSE)

str(x)

```

If you concatenate elements of different data types in a vector, then R will convert the elements in the following order: 1. string; 2. numeric; 3. integer; 4. logical. It means that all other data types will be converted to a string if you combine these elements with a string element.

```{r}
# If you want to create (or convert) an object of a specific data type, then use the as.xxx functions.

a_string <- as.character("A Space Odyssey")
# You can also skip the as.character and directly use: a_string <- "A Space Odyssey". R will recognize is as a string and automatically choose the correct data type.
a_integer <- as.integer(2001)
a_numeric <- as.numeric(99.999)
a_logical <-  as.logical(TRUE)



c(a_integer, a_string)
c(a_integer, a_numeric)
c(a_integer, a_logical)

```

You cannot create a datatype that R doesn't recognize

```{r}
object1 <- as.integer("Hello")
str(object1)
```

## [Data structures]{.underline} in R

Below are some basic data structures in R:

-   `vectors`
-   `lists`
-   `matrices`
-   `dataframes`
-   `factors`

**Vectors**

-   `vectors`: also called `atomic vectors`, where all elements must be of the same basic data types.

```{r}
# A string vector
a_vector_strings <- c("This", "is", "a", "vector", "of", "string", "elements")
str(a_vector_strings)


```

```{r}
# integer vectors
a_vector_integers1 <- c(99, 98)
a_vector_integers2 <- c(1, 2, 3, 4, 5)

str(a_vector_integers1)
```

What happens when we perform operations with two or more vectors of different length? First, we can use the `length()` function to check the length of an object

```{r}

length(a_vector_integers1)

length(a_vector_integers2)

```

We can use `==` as an equal operator to check if both vectors have the same length

```{r}

length(a_vector_integers1) == length(a_vector_integers2)


```

We can see that this will be `FALSE` since the length of the two vectors are not equal.

The opposite is to use the \`!=\` (not equal to) operator:

```{r}
length(a_vector_integers1)!= length(a_vector_integers2)
```

Finally, we can see that when performing addition operation of a_vector_integers1 `(99, 98)` with a_vector_integers2 `(1, 2, 3, 4, 5)`, R will recycle the shorter vector

```{r}
combine_vectors <- a_vector_integers1 + a_vector_integers2

str(combine_vectors)
```

R will therefore perform the element-wise operations `99+1`, `98+2`, `99+3`, `98+4`, `99+5`, and the resulting object will have the same length as a_vector_integers2.

**Matrices**

A matrix is a 2 dimensional data structure for vectors of the same datatype.

**Lists**

We can also store elements of different datatypes in list objects.

```{r}
a_vector_integers1 <- c(99, 98)

a_vector_strings <- c("This", "is", "a", "vector", "of", "string", "elements")

# In this case, we use the list() function.
a_list <- list(vec_int = a_vector_integers1, 
               vec_str = a_vector_strings)

# If you dont name the elements within the list then these will be unamed.
```

To subset an element within the list you can use index [@rspatial_indexing]. There is difference between single `[]` and double brackets`[[]]`. Can you see the differences between the below indexing?

```{r}

a_list[1]
```

```{r}
a_list[[1]]
```

```{r}

a_list[1][1]
```

```{r}
a_list[[1]][1]
```

You can also use the name of the element for subsetting.

```{r}
a_list["vec_int"]

```

The dollar-sign `$` can also be used.

```{r}
# These three subsetting operations will give the same results
a_list$vec_int
a_list["vec_int"]
a_list[[1]]

```

**Dataframes**

Dataframes are similar as lists but flattened into a rectangular form, similar as tables. The length of individual objects have to be the same.

```{r}

sample_data <- data.frame(sample_id = c(1, 2, 3, 4),
                          sample_name = c("Inflow", "Mid_stream", "Outflow", "River"),
                          measured_PFOS = c(TRUE, TRUE, TRUE, FALSE),
                          conc_PFOS_ngL = c(99, 5, 123, NA))

```

**Factors**

See these videos:

<https://www.youtube.com/watch?v=xkRBfy8_2MU>

<https://www.youtube.com/watch?v=cspQYQLZbCo>

### [Object types]{.underline} in R

(from https://discdown.org/rprogramming/vectors.html)

R is an object-oriented programming language with the fundamental design principle: Everything in R is an object. In R, objects can be:

-   Variables (e.g., a, b, result).
-   Functions (e.g., mean(), max(), sin()).
-   Connection handlers.
-   ...

### Operators in R

The different comparison operators will be handy for various data analysis:

See: <https://www.w3schools.com/r/r_operators.asp>

*Comparison operators*

| Operator | Name                  |
|----------|-----------------------|
| `==`     | equal to              |
| `!=`     | not equal to          |
| `=>`     | equal or greater than |
| `=<`     | equal or less than    |
| `>`      | greater than          |
| `<`      | less than             |

*Arithmetic Operators*

| Operator | Name                              | Example   |
|----------|-----------------------------------|-----------|
| \+       | Addition                          | x + y     |
| \-       | Subtraction                       | x - y     |
| \*       | Multiplication                    | x \* y    |
| /        | Division                          | x / y     |
| \^       | Exponent                          | x \^ y    |
| %%       | Modulus (Remainder from division) | `10 %% 5` |
| %/%      | Integer Division                  | x%/%y     |

*Logical Operators*

| Operator | Description                                                                       |
|--------------|----------------------------------------------------------|
| &        | Element-wise Logical AND operator. It returns TRUE if both elements are TRUE      |
| &&       | Logical AND operator - Returns TRUE if both statements are TRUE                   |
| \|       | Elementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE |
| \|\|     | Logical OR operator. It returns TRUE if one of the statement is TRUE.             |
| !\|      | Logical NOT - returns FALSE if statement is TRUE                                  |

*Other useful operators*

| Operator | Description                                | Example                                                                |
|---------------|---------------------|------------------------------------|
| :        | Creates a series of numbers in a sequence  | 1:10 (creates a sequence from 1 to 10)                                 |
| %in%     | Find out if an element belongs to a vector | 2%in%1:10 (check if 2 is found in the vector 1:10, evaluates to TRUE ) |
| %\*%     | Matrix Multiplication                      | m \<- matrix(1:8, nrow=2); 2\*m (will multiply every element with 2)   |

### [Loading or importing data files]{.underline} {#sec-loadfiles}

See: <https://r-graphics.org/loading-a-delimited-text-data-file>, and <https://r-graphics.org/loading-data-from-an-excel-file>

We will use a dataset in excel format from a study on PFAS levels in insects around a pond in Kumla in Sweden for our data analysis. You can find the dataset here: <https://github.com/WBS-TW/Course_R_for_environ_chem_data_analysis/tree/master/data>

```{r}

PFAS_insects <- readxl::read_excel("data/Statistics_Kumla_20200408.xlsx", 
    sheet = "Overview")

```

### [Base R plots]{.underline} {#sec-baseRplots}

Base R plots are those functions that come with the R version. Additional packages that are easier to handle and have more advanced features will be demonstrated later.

**Scatter plot: plot()**

```{r}

# http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs

plot(x = PFAS_insects$PFOA, y = PFAS_insects$PFOS, main = "PFOA vs PFOS concentrations",
     xlab = "PFOA concentrations (ng/L)",
     ylab = "PFOS concentrations (ng/L",
     pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol) 

# We can add a regression line into the same graph
abline(lm(PFAS_insects$PFOS ~ PFAS_insects$PFOA, data = PFAS_insects), col = "blue", lwd = 3) # lwd is the line width

# as well as a loess fit
lines(lowess(PFAS_insects$PFOA, PFAS_insects$PFOS), col = "red", lwd = 3)

# to clear the graphics from the Plots pane, use graphics.off() in the script or dev.off() in the console
 
```

**Bar plots: barplot()**

```{r}
groupsPFOS <- PFAS_insects[, c("Group", "PFOS")] # subset two variables from the dataframe
barplot(height = PFAS_insects$PFOS)

```

**Box plots: boxplot()**

```{r}

# Box plot of one variable
boxplot(PFAS_insects$PFBS)


```
